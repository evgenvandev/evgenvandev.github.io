{"0": {
    "doc": "Базовый дизайн детали",
    "title": "Руководство по базовому дизайну детали",
    "content": "В этом учебном пособии новый пользователь знакомится с некоторыми инструментами и методами, используемыми в верстаке PartDesign (PartDesign Workbench). ",
    "url": "http://localhost:4000/just-the-docs/docs/freecad/freecad-tutorial/basic-part-design-tutorial/#%D1%80%D1%83%D0%BA%D0%BE%D0%B2%D0%BE%D0%B4%D1%81%D1%82%D0%B2%D0%BE-%D0%BF%D0%BE-%D0%B1%D0%B0%D0%B7%D0%BE%D0%B2%D0%BE%D0%BC%D1%83-%D0%B4%D0%B8%D0%B7%D0%B0%D0%B9%D0%BD%D1%83-%D0%B4%D0%B5%D1%82%D0%B0%D0%BB%D0%B8",
    "relUrl": "/docs/freecad/freecad-tutorial/basic-part-design-tutorial/#руководство-по-базовому-дизайну-детали"
  },"1": {
    "doc": "Базовый дизайн детали",
    "title": "Оглавление",
    "content": ". Этот учебник не является полным и всеобъемлющим руководством по верстаку Part Design Workbench, и многие инструменты и возможности не рассматриваются. Этот учебник проведет пользователя через шаги, необходимые для моделирования детали, показанной на изображении ниже, с использованием эскизов. ",
    "url": "http://localhost:4000/just-the-docs/docs/freecad/freecad-tutorial/basic-part-design-tutorial/#%D0%BE%D0%B3%D0%BB%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5",
    "relUrl": "/docs/freecad/freecad-tutorial/basic-part-design-tutorial/#оглавление"
  },"2": {
    "doc": "Базовый дизайн детали",
    "title": "Базовый дизайн детали",
    "content": " ",
    "url": "http://localhost:4000/just-the-docs/docs/freecad/freecad-tutorial/basic-part-design-tutorial/",
    "relUrl": "/docs/freecad/freecad-tutorial/basic-part-design-tutorial/"
  },"3": {
    "doc": "Buttons",
    "title": "Buttons",
    "content": " ",
    "url": "http://localhost:4000/just-the-docs/docs/ui-components/buttons/",
    "relUrl": "/docs/ui-components/buttons/"
  },"4": {
    "doc": "Buttons",
    "title": "Table of contents",
    "content": ". | Basic button styles . | Links that look like buttons | Button element | . | Using utilities with buttons . | Button size | Spacing between buttons | . | . ",
    "url": "http://localhost:4000/just-the-docs/docs/ui-components/buttons/#table-of-contents",
    "relUrl": "/docs/ui-components/buttons/#table-of-contents"
  },"5": {
    "doc": "Buttons",
    "title": "Basic button styles",
    "content": "Links that look like buttons . Link button . Link button Link button Link button . Link button . [Link button](http://example.com/){: .btn } [Link button](http://example.com/){: .btn .btn-purple } [Link button](http://example.com/){: .btn .btn-blue } [Link button](http://example.com/){: .btn .btn-green } [Link button](http://example.com/){: .btn .btn-outline } . Button element . GitHub Flavored Markdown does not support the button element, so you’ll have to use inline HTML for this: . Button element &lt;button type=\"button\" name=\"button\" class=\"btn\"&gt;Button element&lt;/button&gt; . ",
    "url": "http://localhost:4000/just-the-docs/docs/ui-components/buttons/#basic-button-styles",
    "relUrl": "/docs/ui-components/buttons/#basic-button-styles"
  },"6": {
    "doc": "Buttons",
    "title": "Using utilities with buttons",
    "content": "Button size . Wrap the button in a container that uses the font-size utility classes to scale buttons: . Big ass button . Tiny ass button . &lt;span class=\"fs-8\"&gt; [Link button](http://example.com/){: .btn } &lt;/span&gt; &lt;span class=\"fs-3\"&gt; [Tiny ass button](http://example.com/){: .btn } &lt;/span&gt; . Spacing between buttons . Use the margin utility classes to add spacing between two buttons in the same block. Button with space Button . Button with more space Button . [Button with space](http://example.com/){: .btn .btn-purple .mr-2 } [Button ](http://example.com/){: .btn .btn-blue } [Button with more space](http://example.com/){: .btn .btn-green .mr-4 } [Button ](http://example.com/){: .btn .btn-blue } . ",
    "url": "http://localhost:4000/just-the-docs/docs/ui-components/buttons/#using-utilities-with-buttons",
    "relUrl": "/docs/ui-components/buttons/#using-utilities-with-buttons"
  },"7": {
    "doc": "Планер \"Чибис\" - крыло",
    "title": "Крыло планера “Чибис”",
    "content": " ",
    "url": "http://localhost:4000/just-the-docs/docs/model-aircrafts/chibis-model-glider/chibis-model-glider-wing#%D0%BA%D1%80%D1%8B%D0%BB%D0%BE-%D0%BF%D0%BB%D0%B0%D0%BD%D0%B5%D1%80%D0%B0-%D1%87%D0%B8%D0%B1%D0%B8%D1%81",
    "relUrl": "/docs/model-aircrafts/chibis-model-glider/chibis-model-glider-wing#крыло-планера-чибис"
  },"8": {
    "doc": "Планер \"Чибис\" - крыло",
    "title": "Оглавление",
    "content": ". | Конструируем центроплан крыла | . ",
    "url": "http://localhost:4000/just-the-docs/docs/model-aircrafts/chibis-model-glider/chibis-model-glider-wing#%D0%BE%D0%B3%D0%BB%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5",
    "relUrl": "/docs/model-aircrafts/chibis-model-glider/chibis-model-glider-wing#оглавление"
  },"9": {
    "doc": "Планер \"Чибис\" - крыло",
    "title": "Конструируем центроплан крыла",
    "content": "Центроплан крыла цельный. Центральная нервюра (Корневая нервюра) крыла имеет толщину 3 мм. Первая, от центра, нервюра крыла (Нервюра-1) имеет толщину 1,5 мм. Расстояние между средними плоскостями Корневой нервюры и Нервюра-1 равно 10 мм. Пока распологаем пять Нервюр-1, расстояние между средними плоскостями нервюр равно 40 мм. ",
    "url": "http://localhost:4000/just-the-docs/docs/model-aircrafts/chibis-model-glider/chibis-model-glider-wing#%D0%BA%D0%BE%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%B8%D1%80%D1%83%D0%B5%D0%BC-%D1%86%D0%B5%D0%BD%D1%82%D1%80%D0%BE%D0%BF%D0%BB%D0%B0%D0%BD-%D0%BA%D1%80%D1%8B%D0%BB%D0%B0",
    "relUrl": "/docs/model-aircrafts/chibis-model-glider/chibis-model-glider-wing#конструируем-центроплан-крыла"
  },"10": {
    "doc": "Планер \"Чибис\" - крыло",
    "title": "Планер \"Чибис\" - крыло",
    "content": " ",
    "url": "http://localhost:4000/just-the-docs/docs/model-aircrafts/chibis-model-glider/chibis-model-glider-wing",
    "relUrl": "/docs/model-aircrafts/chibis-model-glider/chibis-model-glider-wing"
  },"11": {
    "doc": "Планер \"Чибис\"",
    "title": "Планер “Чибис”",
    "content": " ",
    "url": "http://localhost:4000/just-the-docs/docs/model-aircrafts/chibis-model-glider/chibis-model-glider/#%D0%BF%D0%BB%D0%B0%D0%BD%D0%B5%D1%80-%D1%87%D0%B8%D0%B1%D0%B8%D1%81",
    "relUrl": "/docs/model-aircrafts/chibis-model-glider/chibis-model-glider/#планер-чибис"
  },"12": {
    "doc": "Планер \"Чибис\"",
    "title": "Оглавление",
    "content": ". | Введение | Фюзеляж | . ",
    "url": "http://localhost:4000/just-the-docs/docs/model-aircrafts/chibis-model-glider/chibis-model-glider/#%D0%BE%D0%B3%D0%BB%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5",
    "relUrl": "/docs/model-aircrafts/chibis-model-glider/chibis-model-glider/#оглавление"
  },"13": {
    "doc": "Планер \"Чибис\"",
    "title": "Введение",
    "content": "Эту модель планера специально сконструировал для начинающих авиамоделистов чемпион мира А. Аверьянов. Она обладает высокими лётными качествами, а сделать её несложно. ",
    "url": "http://localhost:4000/just-the-docs/docs/model-aircrafts/chibis-model-glider/chibis-model-glider/#%D0%B2%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5",
    "relUrl": "/docs/model-aircrafts/chibis-model-glider/chibis-model-glider/#введение"
  },"14": {
    "doc": "Планер \"Чибис\"",
    "title": "Фюзеляж",
    "content": "Изготовление модели начнём с фюзеляжа. Перенесём с чертежа на фанеру (рис. 91) контуры носовой части фюзеляжа и выпилим её. В носке пропилим лобзиком отверстия для балласта. ",
    "url": "http://localhost:4000/just-the-docs/docs/model-aircrafts/chibis-model-glider/chibis-model-glider/#%D1%84%D1%8E%D0%B7%D0%B5%D0%BB%D1%8F%D0%B6",
    "relUrl": "/docs/model-aircrafts/chibis-model-glider/chibis-model-glider/#фюзеляж"
  },"15": {
    "doc": "Планер \"Чибис\"",
    "title": "Планер \"Чибис\"",
    "content": " ",
    "url": "http://localhost:4000/just-the-docs/docs/model-aircrafts/chibis-model-glider/chibis-model-glider/",
    "relUrl": "/docs/model-aircrafts/chibis-model-glider/chibis-model-glider/"
  },"16": {
    "doc": "Code",
    "title": "Code",
    "content": " ",
    "url": "http://localhost:4000/just-the-docs/docs/ui-components/code/",
    "relUrl": "/docs/ui-components/code/"
  },"17": {
    "doc": "Code",
    "title": "Table of contents",
    "content": ". | Inline code | Syntax highlighted code blocks | Code blocks with rendered examples | . ",
    "url": "http://localhost:4000/just-the-docs/docs/ui-components/code/#table-of-contents",
    "relUrl": "/docs/ui-components/code/#table-of-contents"
  },"18": {
    "doc": "Code",
    "title": "Inline code",
    "content": "Code can be rendered inline by wrapping it in single back ticks. Lorem ipsum dolor sit amet, &lt;inline code snippet&gt; adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. ",
    "url": "http://localhost:4000/just-the-docs/docs/ui-components/code/#inline-code",
    "relUrl": "/docs/ui-components/code/#inline-code"
  },"19": {
    "doc": "Code",
    "title": "Heading with &lt;inline code snippet&gt; in it.",
    "content": "Lorem ipsum dolor sit amet, `&lt;inline code snippet&gt;` adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. ## Heading with `&lt;inline code snippet&gt;` in it. ",
    "url": "http://localhost:4000/just-the-docs/docs/ui-components/code/#heading-with-inline-code-snippet-in-it",
    "relUrl": "/docs/ui-components/code/#heading-with-inline-code-snippet-in-it"
  },"20": {
    "doc": "Code",
    "title": "Syntax highlighted code blocks",
    "content": "Use Jekyll’s built-in syntax highlighting with Rouge for code blocks by using three backticks, followed by the language name: . // Javascript code with syntax highlighting. var fun = function lang(l) { dateformat.i18n = require('./lang/' + l) return true; } . ```js // Javascript code with syntax highlighting. var fun = function lang(l) { dateformat.i18n = require('./lang/' + l) return true; } ``` . ",
    "url": "http://localhost:4000/just-the-docs/docs/ui-components/code/#syntax-highlighted-code-blocks",
    "relUrl": "/docs/ui-components/code/#syntax-highlighted-code-blocks"
  },"21": {
    "doc": "Code",
    "title": "Code blocks with rendered examples",
    "content": "To demonstrate front end code, sometimes it’s useful to show a rendered example of that code. After including the styles from your project that you’ll need to show the rendering, you can use a &lt;div&gt; with the code-example class, followed by the code block syntax. If you want to render your output with Markdown instead of HTML, use the markdown=\"1\" attribute to tell Jekyll that the code you are rendering will be in Markdown format… This is about to get meta… . Link button . [Link button](http://example.com/){: .btn } . &lt;div class=\"code-example\" markdown=\"1\"&gt; [Link button](http://example.com/){: .btn } &lt;/div&gt; ```markdown [Link button](http://example.com/){: .btn } ``` . ",
    "url": "http://localhost:4000/just-the-docs/docs/ui-components/code/#code-blocks-with-rendered-examples",
    "relUrl": "/docs/ui-components/code/#code-blocks-with-rendered-examples"
  },"22": {
    "doc": "Color",
    "title": "Color Utilities",
    "content": " ",
    "url": "http://localhost:4000/just-the-docs/docs/utilities/color/#color-utilities",
    "relUrl": "/docs/utilities/color/#color-utilities"
  },"23": {
    "doc": "Color",
    "title": "Table of contents",
    "content": ". | Light Greys | Dark Greys | Purples | Blues | Greens | Yellows | Reds | . All the colors used in Just the Docs have been systematized into a series of variables that have been extended to both font color and background color utility classes. ",
    "url": "http://localhost:4000/just-the-docs/docs/utilities/color/#table-of-contents",
    "relUrl": "/docs/utilities/color/#table-of-contents"
  },"24": {
    "doc": "Color",
    "title": "Light Greys",
    "content": "| Color value | Font color utility | Background color utility | . | grey-lt-000 | .text-grey-lt-000 | .bg-grey-lt-000 | . | grey-lt-100 | .text-grey-lt-100 | .bg-grey-lt-100 | . | grey-lt-200 | .text-grey-lt-200 | .bg-grey-lt-200 | . | grey-lt-300 | .text-grey-lt-300 | .bg-grey-lt-300 | . ",
    "url": "http://localhost:4000/just-the-docs/docs/utilities/color/#light-greys",
    "relUrl": "/docs/utilities/color/#light-greys"
  },"25": {
    "doc": "Color",
    "title": "Dark Greys",
    "content": "| Color value | Font color utility | Background color utility | . | grey-dk-000 | .text-grey-dk-000 | .bg-grey-dk-000 | . | grey-dk-100 | .text-grey-dk-100 | .bg-grey-dk-100 | . | grey-dk-200 | .text-grey-dk-200 | .bg-grey-dk-200 | . | grey-dk-250 | .text-grey-dk-250 | .bg-grey-dk-250 | . | grey-dk-300 | .text-grey-dk-300 | .bg-grey-dk-300 | . ",
    "url": "http://localhost:4000/just-the-docs/docs/utilities/color/#dark-greys",
    "relUrl": "/docs/utilities/color/#dark-greys"
  },"26": {
    "doc": "Color",
    "title": "Purples",
    "content": "| Color value | Font color utility | Background color utility | . | purple-000 | .text-purple-000 | .bg-purple-000 | . | purple-100 | .text-purple-100 | .bg-purple-100 | . | purple-200 | .text-purple-200 | .bg-purple-200 | . | purple-300 | .text-purple-300 | .bg-purple-300 | . ",
    "url": "http://localhost:4000/just-the-docs/docs/utilities/color/#purples",
    "relUrl": "/docs/utilities/color/#purples"
  },"27": {
    "doc": "Color",
    "title": "Blues",
    "content": "| Color value | Font color utility | Background color utility | . | blue-000 | .text-blue-000 | .bg-blue-000 | . | blue-100 | .text-blue-100 | .bg-blue-100 | . | blue-200 | .text-blue-200 | .bg-blue-200 | . | blue-300 | .text-blue-300 | .bg-blue-300 | . ",
    "url": "http://localhost:4000/just-the-docs/docs/utilities/color/#blues",
    "relUrl": "/docs/utilities/color/#blues"
  },"28": {
    "doc": "Color",
    "title": "Greens",
    "content": "| Color value | Font color utility | Background color utility | . | green-000 | .text-green-000 | .bg-green-000 | . | green-100 | .text-green-100 | .bg-green-100 | . | green-200 | .text-green-200 | .bg-green-200 | . | green-300 | .text-green-300 | .bg-green-300 | . ",
    "url": "http://localhost:4000/just-the-docs/docs/utilities/color/#greens",
    "relUrl": "/docs/utilities/color/#greens"
  },"29": {
    "doc": "Color",
    "title": "Yellows",
    "content": "| Color value | Font color utility | Background color utility | . | yellow-000 | .text-yellow-000 | .bg-yellow-000 | . | yellow-100 | .text-yellow-100 | .bg-yellow-100 | . | yellow-200 | .text-yellow-200 | .bg-yellow-200 | . | yellow-300 | .text-yellow-300 | .bg-yellow-300 | . ",
    "url": "http://localhost:4000/just-the-docs/docs/utilities/color/#yellows",
    "relUrl": "/docs/utilities/color/#yellows"
  },"30": {
    "doc": "Color",
    "title": "Reds",
    "content": "| Color value | Font color utility | Background color utility | . | red-000 | .text-red-000 | .bg-red-000 | . | red-100 | .text-red-100 | .bg-red-100 | . | red-200 | .text-red-200 | .bg-red-200 | . | red-300 | .text-red-300 | .bg-red-300 | . ",
    "url": "http://localhost:4000/just-the-docs/docs/utilities/color/#reds",
    "relUrl": "/docs/utilities/color/#reds"
  },"31": {
    "doc": "Color",
    "title": "Color",
    "content": " ",
    "url": "http://localhost:4000/just-the-docs/docs/utilities/color/",
    "relUrl": "/docs/utilities/color/"
  },"32": {
    "doc": "Конфигурация",
    "title": "Конфигурация",
    "content": "В “Только Документация” есть некоторые определённые параметры конфигурации, которые могут быть определены для вашего сайта на Jekyll в файле _config.yml. ",
    "url": "http://localhost:4000/just-the-docs/docs/configuration/",
    "relUrl": "/docs/configuration/"
  },"33": {
    "doc": "Конфигурация",
    "title": "Оглавление",
    "content": ". | Логотип сайта | Поиск | Дополнительные ссылки | Заголовочные якорные ссылки | Содержание нижнего колонтитула | Цветовая схема | Google Analytics | Коллекции документов | . В качестве примера, посмотрите файл _config.yml этого сайта. ",
    "url": "http://localhost:4000/just-the-docs/docs/configuration/#%D0%BE%D0%B3%D0%BB%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5",
    "relUrl": "/docs/configuration/#оглавление"
  },"34": {
    "doc": "Конфигурация",
    "title": "Логотип сайта",
    "content": "# Set a path/url to a logo that will be displayed instead of the title # Задайте путь/url к логотипу, который будет отображаться вместо заголовка logo: \"/assets/images/just-the-docs.png\" . ",
    "url": "http://localhost:4000/just-the-docs/docs/configuration/#%D0%BB%D0%BE%D0%B3%D0%BE%D1%82%D0%B8%D0%BF-%D1%81%D0%B0%D0%B9%D1%82%D0%B0",
    "relUrl": "/docs/configuration/#логотип-сайта"
  },"35": {
    "doc": "Конфигурация",
    "title": "Поиск",
    "content": "# Enable or disable the site search # Включение или отключение поиска по сайту # Supports true (default) or false # Поддерживает true (по умолчанию) или false search_enabled: true search: # Split pages into sections that can be searched individually # Разделите страницы на разделы, которые можно искать по отдельности # Supports 1 - 6, default: 2 # Поддерживает 1 - 6, по умолчанию: 2 heading_level: 2 # Maximum amount of previews per search result # Максимальное количество превью на результат поиска # Default: 3 # По умолчанию: 3 previews: 3 # Maximum amount of words to display before a matched word in the preview # Максимальное количество слов, отображаемых перед совпадающим словом в предварительном просмотре # Default: 5 # По умолчанию: 5 preview_words_before: 5 # Maximum amount of words to display after a matched word in the preview # Максимальное количество слов, отображаемых после совпадающего слова в предварительном просмотре # Default: 10 # По умолчанию: 10 preview_words_after: 10 # Set the search token separator # Установите разделитель токенов поиска # Default: /[\\s\\-/]+/ # По умолчанию: /[\\s\\-/]+/ # Example: enable support for hyphenated search words # Пример: включить поддержку поисковых слов с дефисом tokenizer_separator: /[\\s/]+/ # Display the relative url in search results # Отображать относительный URL в результатах поиска # Supports true (default) or false # Поддерживает true (по умолчанию) или false rel_url: true # Enable or disable the search button that appears in the bottom right corner of every page # Включение или отключение кнопки поиска, которая появляется в правом нижнем углу каждой страницы # Supports true or false (default) # Поддерживается true или false (по умолчанию) button: false . ",
    "url": "http://localhost:4000/just-the-docs/docs/configuration/#%D0%BF%D0%BE%D0%B8%D1%81%D0%BA",
    "relUrl": "/docs/configuration/#поиск"
  },"36": {
    "doc": "Конфигурация",
    "title": "Дополнительные ссылки",
    "content": "# Aux links for the upper right navigation # Дополнительные ссылки для верхней правой навигации aux_links: \"Только документация на GitHub\": - \"//github.com/evgenvandev/just-the-docs\" # Makes Aux links open in a new tab. Default is false # Открывает дополнительные ссылки в новой вкладке. По умолчанию false aux_links_new_tab: false . ",
    "url": "http://localhost:4000/just-the-docs/docs/configuration/#%D0%B4%D0%BE%D0%BF%D0%BE%D0%BB%D0%BD%D0%B8%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D1%8B%D0%B5-%D1%81%D1%81%D1%8B%D0%BB%D0%BA%D0%B8",
    "relUrl": "/docs/configuration/#дополнительные-ссылки"
  },"37": {
    "doc": "Конфигурация",
    "title": "Заголовочные якорные ссылки",
    "content": "# Heading anchor links appear on hover over h1-h6 tags in page content # allowing users to deep link to a particular heading on a page. # Якорные ссылки заголовков появляются при наведении курсора на теги h1-h6 в содержимом страницы, # что позволяет пользователям создавать глубокие ссылки на определенный заголовок на странице. # # Supports true (default) or false # Поддерживается true (по умолчанию) или false heading_anchors: true . ",
    "url": "http://localhost:4000/just-the-docs/docs/configuration/#%D0%B7%D0%B0%D0%B3%D0%BE%D0%BB%D0%BE%D0%B2%D0%BE%D1%87%D0%BD%D1%8B%D0%B5-%D1%8F%D0%BA%D0%BE%D1%80%D0%BD%D1%8B%D0%B5-%D1%81%D1%81%D1%8B%D0%BB%D0%BA%D0%B8",
    "relUrl": "/docs/configuration/#заголовочные-якорные-ссылки"
  },"38": {
    "doc": "Конфигурация",
    "title": "Содержание нижнего колонтитула",
    "content": "# Footer content # Содержание нижнего колонтитула # appears at the bottom of every page's main content # отображается внизу основного содержимого каждой страницы. # Note: The footer_content option is deprecated and will be removed in a future major release. # Please use `_includes/footer_custom.html` for more robust # Примечание: Параметр footer_content устарел и будет удален в будущем основном выпуске. # Для большей надежности используйте _includes / footer_custom.html. markup / liquid-based content. footer_content: \"Copyright &amp;copy; 2017-2020 Evgeniy. Distributed by an &lt;a href=\\\"https://github.com/evgenvandev/just-the-docs/tree/master/LICENSE.txt\\\"&gt;MIT license.&lt;/a&gt;\" # Footer last edited timestamp # Отметка времени последнего редактирования нижнего колонтитула # show or hide edit time - page must have `last_modified_date` defined in the frontmatter # показать или скрыть время редактирования - страница должна иметь `last_modified_date`, определенную в frontmatter last_edit_timestamp: true # uses ruby's time format: https://ruby-doc.org/stdlib-2.7.0/libdoc/time/rdoc/Time.html # использует формат времени Ruby: https://ruby-doc.org/stdlib-2.7.0/libdoc/time/rdoc/Time.html last_edit_time_format: \"%b %e %Y at %I:%M %p\" # Footer \"Edit this page on GitHub\" link text # Нижний колонтитул \"Редактировать эту страницу на GitHub\" текст ссылки # show or hide edit this page link # показать или скрыть ссылку редактирования этой страницы gh_edit_link: true gh_edit_link_text: \"Редактировать эту страницу на GitHub.\" # the github URL for your repo # URL github для вашего репозитория gh_edit_repository: \"https://github.com/evgenvandev/just-the-docs\" # the branch that your docs is served from # ветка, из которой обслуживаются ваши документы gh_edit_branch: \"master\" # the source that your files originate from # ресурс, где находятся ваши файлы # gh_edit_source: docs # \"tree\" or \"edit\" if you want the user to jump into the editor immediately # \"tree\" или \"edit\", если вы хотите, чтобы пользователь сразу же перешел в редактор. gh_edit_view_mode: \"tree\" . note: footer_content is deprecated, but still supported. For a better experience we have moved this into an include called _includes/footer_custom.html which will allow for robust markup / liquid-based content. Примечание: footer_content устарел, но всё ещё поддерживается. Для лучшего опыта мы переместили это во включение под названием _includes/footer_custom.html, которое обеспечит надежную разметку / жидкий контент. | the “page last modified” data will only display if a page has a key called last_modified_date, formatted in some readable date format | . данные “page last modified” будут отображаться только в том случае, если страница имеет ключ с именем last_modified_date, отформатированный в некотором читаемом формате даты. | last_edit_time_format uses Ruby’s DateTime formatter; see examples and more information at this link. | . last_edit_time_format использует Ruby’s DateTime formatter; смотрите примеры и дополнительную информацию at this link. | gh_edit_repository is the URL of the project’s GitHub repository | . gh_edit_repository это URL репозитория GitHub проекта . | gh_edit_branch is the branch that the docs site is served from; defaults to master | . gh_edit_branch это ветка, из которой обслуживается сайт документации; по умолчанию master . | gh_edit_source is the source directory that your project files are stored in (should be the same as site.source) | . gh_edit_source это исходный каталог, в котором хранятся файлы вашего проекта (должно быть таким же, как site.source) . | gh_edit_view_mode is \"tree\" by default, which brings the user to the github page; switch to \"edit\" to bring the user directly into editing mode | . gh_edit_view_mode по умолчанию - “tree”, которое переносит пользователя на страницу github; переключитесь на “edit”, чтобы перевести пользователя прямо в режим редактирования . ",
    "url": "http://localhost:4000/just-the-docs/docs/configuration/#%D1%81%D0%BE%D0%B4%D0%B5%D1%80%D0%B6%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BD%D0%B8%D0%B6%D0%BD%D0%B5%D0%B3%D0%BE-%D0%BA%D0%BE%D0%BB%D0%BE%D0%BD%D1%82%D0%B8%D1%82%D1%83%D0%BB%D0%B0",
    "relUrl": "/docs/configuration/#содержание-нижнего-колонтитула"
  },"39": {
    "doc": "Конфигурация",
    "title": "Цветовая схема",
    "content": "# Color scheme supports \"light\" (default) and \"dark\" # Поддерживаются цветовые схемы \"light\" (по умолчанию) и \"dark\" color_scheme: dark . Предварительный просмотр тёмной цветовой схемы . Смотрите Настройка для получения дополнительной информации. ",
    "url": "http://localhost:4000/just-the-docs/docs/configuration/#%D1%86%D0%B2%D0%B5%D1%82%D0%BE%D0%B2%D0%B0%D1%8F-%D1%81%D1%85%D0%B5%D0%BC%D0%B0",
    "relUrl": "/docs/configuration/#цветовая-схема"
  },"40": {
    "doc": "Конфигурация",
    "title": "Google Analytics",
    "content": "# Google Analytics Tracking (optional) # e.g, UA-1234567-89 ga_tracking: UA-5555555-55 # Use GDPR compliant Google Analytics settings (true by default) # Использовать настройки Google Analytics, соответствующие GDPR (по умолчанию true) ga_tracking_anonymize_ip: true . ",
    "url": "http://localhost:4000/just-the-docs/docs/configuration/#google-analytics",
    "relUrl": "/docs/configuration/#google-analytics"
  },"41": {
    "doc": "Конфигурация",
    "title": "Коллекции документов",
    "content": "По умолчанию навигация и поиск включают обычные страницы. Вместо этого вы также можете использовать Jekyll коллекции, Jekyll коллекции которые семантически группируют документы вместе. Например, поместите все ваши файлы документации в папку _docs и создайте коллекцию docs: . # Определение Jekyll коллекции collections: # Определите коллекцию с именем \"docs\", ее документы находятся в каталоге \"_docs\" docs: permalink: \"/:collection/:path/\" output: true just_the_docs: # Определение, какие коллекции используются в \"Только документация\" collections: # Ссылка на коллекцию \"docs\" docs: # Дайте коллекции имя name: Documentation # Исключить коллекцию из навигации # Поддерживается true или false (по умолчанию) nav_exclude: false # Исключить коллекцию из поиска # Поддерживается true или false (по умолчанию) search_exclude: false . Вы можете ссылаться на несколько коллекций. Это создает категории в навигации с настроенными именами. collections: docs: permalink: \"/:collection/:path/\" output: true tutorials: permalink: \"/:collection/:path/\" output: true just_the_docs: collections: docs: name: Documentation tutorials: name: Tutorials . ",
    "url": "http://localhost:4000/just-the-docs/docs/configuration/#%D0%BA%D0%BE%D0%BB%D0%BB%D0%B5%D0%BA%D1%86%D0%B8%D0%B8-%D0%B4%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%BE%D0%B2",
    "relUrl": "/docs/configuration/#коллекции-документов"
  },"42": {
    "doc": "Customization",
    "title": "Customization",
    "content": " ",
    "url": "http://localhost:4000/just-the-docs/docs/customization/",
    "relUrl": "/docs/customization/"
  },"43": {
    "doc": "Customization",
    "title": "Table of contents",
    "content": ". | Color schemes | Custom schemes . | Define a custom scheme | Use a custom scheme | Switchable custom scheme | . | Override and completely custom styles | . ",
    "url": "http://localhost:4000/just-the-docs/docs/customization/#table-of-contents",
    "relUrl": "/docs/customization/#table-of-contents"
  },"44": {
    "doc": "Customization",
    "title": "Color schemes",
    "content": "New . Just the Docs supports two color schemes: light (default), and dark. To enable a color scheme, set the color_scheme parameter in your site’s _config.yml file: . Example . # Color scheme supports \"light\" (default) and \"dark\" color_scheme: dark . Preview dark color scheme . ",
    "url": "http://localhost:4000/just-the-docs/docs/customization/#color-schemes",
    "relUrl": "/docs/customization/#color-schemes"
  },"45": {
    "doc": "Customization",
    "title": "Custom schemes",
    "content": "Define a custom scheme . You can add custom schemes. If you want to add a scheme named foo (can be any name) just add a file _sass/color_schemes/foo.scss (replace foo by your scheme name) where you override theme variables to change colors, fonts, spacing, etc. Available variables are listed in the _variables.scss file. For example, to change the link color from the purple default to blue, include the following inside your scheme file: . Example . $link-color: $blue-000; . Note: Editing the variables directly in _sass/support/variables.scss is not recommended and can cause other dependencies to fail. Please use scheme files. Use a custom scheme . To use the custom color scheme, only set the color_scheme parameter in your site’s _config.yml file: . color_scheme: foo . Switchable custom scheme . If you want to be able to change the scheme dynamically, for example via javascript, just add a file assets/css/just-the-docs-foo.scss (replace foo by your scheme name) with the following content:` . --- --- {% include css/just-the-docs.scss.liquid color_scheme=\"foo\" %} . This allows you to switch the scheme via the following javascript. jtd.setTheme('foo'); . ",
    "url": "http://localhost:4000/just-the-docs/docs/customization/#custom-schemes",
    "relUrl": "/docs/customization/#custom-schemes"
  },"46": {
    "doc": "Customization",
    "title": "Override and completely custom styles",
    "content": "For styles that aren’t defined as variables, you may want to modify specific CSS classes. Additionally, you may want to add completely custom CSS specific to your content. To do this, put your styles in the file _sass/custom/custom.scss. This will allow for all overrides to be kept in a single file, and for any upstream changes to still be applied. For example, if you’d like to add your own styles for printing a page, you could add the following styles. Example . // Print-only styles. @media print { .side-bar, .page-header { display: none; } .main-content { max-width: auto; margin: 1em;} } . ",
    "url": "http://localhost:4000/just-the-docs/docs/customization/#override-and-completely-custom-styles",
    "relUrl": "/docs/customization/#override-and-completely-custom-styles"
  },"47": {
    "doc": "FreaaCAD tutorial",
    "title": "Учебник по FreeCAD",
    "content": "Перевод части учебника с Wiki FreeCAD. ",
    "url": "http://localhost:4000/just-the-docs/docs/freecad/freecad-tutorial#%D1%83%D1%87%D0%B5%D0%B1%D0%BD%D0%B8%D0%BA-%D0%BF%D0%BE-freecad",
    "relUrl": "/docs/freecad/freecad-tutorial#учебник-по-freecad"
  },"48": {
    "doc": "FreaaCAD tutorial",
    "title": "FreaaCAD tutorial",
    "content": " ",
    "url": "http://localhost:4000/just-the-docs/docs/freecad/freecad-tutorial",
    "relUrl": "/docs/freecad/freecad-tutorial"
  },"49": {
    "doc": "FreeCAD",
    "title": "FreeCAD",
    "content": "FreeCAD это универсальная параметрическая 3D САПР , чья разработка полностью базируется на принципах открытого исходного кода (LGPL License). ",
    "url": "http://localhost:4000/just-the-docs/docs/freecad",
    "relUrl": "/docs/freecad"
  },"50": {
    "doc": "FreeCAD",
    "title": "Оглавление",
    "content": ". | О проекте FreeCAD | . ",
    "url": "http://localhost:4000/just-the-docs/docs/freecad#%D0%BE%D0%B3%D0%BB%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5",
    "relUrl": "/docs/freecad#оглавление"
  },"51": {
    "doc": "FreeCAD",
    "title": "О проекте FreeCAD",
    "content": "Проект FreeCAD начался в далёком 2001 году, как описано на странице его истории. | Wiki по FreCAD | Сборник руководств по обучению (Tutorial) | Форум сообщества FreeCAD | . ",
    "url": "http://localhost:4000/just-the-docs/docs/freecad#%D0%BE-%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B5-freecad",
    "relUrl": "/docs/freecad#о-проекте-freecad"
  },"52": {
    "doc": "Git",
    "title": "Система контроля версий Git",
    "content": "Так называют программу, которая позволяет хранить разные версии одного и того же документа, легко переключаться между ранними и поздними вариантами, вносить и отслеживать изменения. ",
    "url": "http://localhost:4000/just-the-docs/docs/git#%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0-%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D1%8F-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D0%B9-git",
    "relUrl": "/docs/git#система-контроля-версий-git"
  },"53": {
    "doc": "Git",
    "title": "Оглавление",
    "content": ". | Устанавливаем Git . | Установка в Linux | Установка на macOS | Установка в Windows | Проверим, что Git установлен | . | Настройка Git | Регистрация на GitHub | Устанавливаем SSH-ключи | Работа с репозиториями . | Клонируем репозиторий (clone) | Отправляем свои изменения (commit) в репозиторий на GitHub | Забираем (pull - подтягиваем) изменения из ветки gh-pages | . | . ",
    "url": "http://localhost:4000/just-the-docs/docs/git#%D0%BE%D0%B3%D0%BB%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5",
    "relUrl": "/docs/git#оглавление"
  },"54": {
    "doc": "Git",
    "title": "Устанавливаем Git",
    "content": "Git сперва нужно установить. Способы зависят от операционной системы компьютера. Установка в Linux . Используйте обычный менеджер пакетов вашего дистрибутива. Откройте терминал и введите подходящие команды. | Если у вас 21 или более ранняя версия Fedora, используйте yum install git. | Для 22 и последующих версий Fedora вводите dnf install git. | Для дистрибутивов, основанных на Debian, например, Ubuntu, используйте apt-get: sudo apt-get install git. | . Полный список команд для различных дистрибутивов можно посмотреть здесь. Установка на macOS . | Скачиваем Git со страницы проекта. | Запускаем загруженный файл. | Система может показать окно с ошибкой, где будет написано, что файл скачан с неавторизованного сайта и инсталлятор не может быть запущен. В таком случае нужно зайти в «Системные настройки» — «Безопасность» (Security and Privacy), в появившемся окне будет сообщение об ошибке и кнопка Open anyway (Всё равно открыть). Нажимаем. | Система покажет окно, уточняющее хотите ли вы запустить установку. Подтверждаем действие. | Установщик проведёт через все необходимые шаги. | . Установка в Windows . Скачайте exe-файл инсталлятора с сайта Git и запустите его. Это Git для Windows, он называется msysGit. Установщик спросит добавлять ли в меню проводника возможность запуска файлов с помощью Git Bash (консольная версия) и GUI (графическая версия). Подтвердите действие, чтобы далее вести работу через консоль в Git Bash. Остальные пункты можно оставить по умолчанию. Проверим, что Git установлен . После того, как все действия по установке завершены, убедимся, что Git появился в системе компьютера. Откройте терминал и введите git --version, должна появиться текущая версия программы на вашей машине. Эта проверка подходит для всех операционных систем. ",
    "url": "http://localhost:4000/just-the-docs/docs/git#%D1%83%D1%81%D1%82%D0%B0%D0%BD%D0%B0%D0%B2%D0%BB%D0%B8%D0%B2%D0%B0%D0%B5%D0%BC-git",
    "relUrl": "/docs/git#устанавливаем-git"
  },"55": {
    "doc": "Git",
    "title": "Настройка Git",
    "content": "После того как Git появился на компьютере, нужно ввести свои данные, а именно имя и адрес электронной почты. Ваши действия в Git будут содержать эту информацию. Откройте терминал и используйте следующую команду, чтобы добавить своё имя: git config --global user.name \"ваше имя\" Для добавления почтового адреса вводите: git config --global user.email адрес . Обратите внимание, что в командах, указанных выше, есть опция --global. Это значит, что такие данные будут сохранены для всех ваших действий в Git и вводить их больше не надо. Если вы хотите менять эту информацию для разных проектов, то в директории проекта вводите эти же команды, только без опции --global. ",
    "url": "http://localhost:4000/just-the-docs/docs/git#%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0-git",
    "relUrl": "/docs/git#настройка-git"
  },"56": {
    "doc": "Git",
    "title": "Регистрация на GitHub",
    "content": "Что такое GitHub? . GitHub - веб-сервис, который основан на системе Git. Это такая социальная сеть для разработчиков, которая помогает удобно вести коллективную разработку IT-проектов. Здесь можно публиковать и редактировать свой код, комментировать чужие наработки, следить за новостями других пользователей. Чтобы начать работу с GitHub, нужно зарегистрироваться на сайте, если вы ещё этого не сделали. | Переходим на сайт GitHub. | . ",
    "url": "http://localhost:4000/just-the-docs/docs/git#%D1%80%D0%B5%D0%B3%D0%B8%D1%81%D1%82%D1%80%D0%B0%D1%86%D0%B8%D1%8F-%D0%BD%D0%B0-github",
    "relUrl": "/docs/git#регистрация-на-github"
  },"57": {
    "doc": "Git",
    "title": "Устанавливаем SSH-ключи",
    "content": "Git установлен, профиль на GitHub создан. Осталось добавить SSH-ключ и можно приступать к работе с проектом. Что такое SSH-ключ и зачем он нужен? . ",
    "url": "http://localhost:4000/just-the-docs/docs/git#%D1%83%D1%81%D1%82%D0%B0%D0%BD%D0%B0%D0%B2%D0%BB%D0%B8%D0%B2%D0%B0%D0%B5%D0%BC-ssh-%D0%BA%D0%BB%D1%8E%D1%87%D0%B8",
    "relUrl": "/docs/git#устанавливаем-ssh-ключи"
  },"58": {
    "doc": "Git",
    "title": "Работа с репозиториями",
    "content": "Для начала определим, что такое репозиторий. Это рабочая директория с вашим проектом. По сути, это та же папка с HTML, CSS, JavaScript и прочими файлами, что хранится у вас на компьютере, но находится на сервере GitHub. Поэтому вы можете работать с проектом удалённо на любой машине, не переживая, что какие-то из ваших файлов потеряются — все данные будут в репозитории при условии, что вы их туда отправите. Но об этом позже. Клонируем репозиторий (clone) . Теперь нужно склонировать форк себе на компьютер, чтобы вести работу с кодом локально. Тут нам и пригодится SSH. Открываем консоль, переходим в директорию, где хотим сохранить папку с проектом, и вводим команду: . git clone git@github.com:your-nickname/your-project.git . Например: . git clone git@github.com:evgenvandev/just-the-docs.git -b gh-pages . где: . | клонирование ветки gh-pages (-b это branch - ветка) | репозитория git@github.com:evgenvandev/just-the-docs.git | в папку с названием репозитория (just-the-docs), это по умолчанию - название папки совпадает с названием репозитория. | . Если указать название папки проекта, тогда команда будет следующей: . git clone git@github.com:evgenvandev/just-the-docs.git -b gh-pages name_folder . где: . | name_folder - название папки на компьютере, куда копируется проект с GitHub. | . Отправляем свои изменения (commit) в репозиторий на GitHub . Чтобы отправить свои изменения (commit) в репозиторий на GitHub, введите команду: . git push origin название-текущей-ветки . где: . | origin означает репозиторий, который был склонирован на компьютер | . git push git@github.com:evgenvandev/just-the-docs.git gh-pages . где: . | git@github.com:evgenvandev/just-the-docs.git репозиторий, куда отправляем изменения | gh-pages название текущей ветки | . Забираем (pull - подтягиваем) изменения из ветки gh-pages . git pull git@github.com:evgenvandev/just-the-docs.git gh-pages . ",
    "url": "http://localhost:4000/just-the-docs/docs/git#%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0-%D1%81-%D1%80%D0%B5%D0%BF%D0%BE%D0%B7%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D1%8F%D0%BC%D0%B8",
    "relUrl": "/docs/git#работа-с-репозиториями"
  },"59": {
    "doc": "Git",
    "title": "Git",
    "content": " ",
    "url": "http://localhost:4000/just-the-docs/docs/git",
    "relUrl": "/docs/git"
  },"60": {
    "doc": "Markdown kitchen sink",
    "title": "Header 1",
    "content": "This is a normal paragraph following a header. GitHub is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere. ",
    "url": "http://localhost:4000/just-the-docs/docs/index-test/#header-1",
    "relUrl": "/docs/index-test/#header-1"
  },"61": {
    "doc": "Markdown kitchen sink",
    "title": "Header 2",
    "content": "This is a blockquote following a header. When something is important enough, you do it even if the odds are not in your favor. Header 3 . // Javascript code with syntax highlighting. var fun = function lang(l) { dateformat.i18n = require('./lang/' + l) return true; } . # Ruby code with syntax highlighting GitHubPages::Dependencies.gems.each do |gem, version| s.add_dependency(gem, \"= #{version}\") end . Header 4 with code not transformed . | This is an unordered list following a header. | This is an unordered list following a header. | This is an unordered list following a header. | . Header 5 . | This is an ordered list following a header. | This is an ordered list following a header. | This is an ordered list following a header. | . Header 6 . | head1 | head two | three | . | ok | good swedish fish | nice | . | out of stock | good and plenty | nice | . | ok | good oreos | hmm | . | ok | good zoute drop | yumm | . There’s a horizontal rule below this. Here is an unordered list: . | Item foo | Item bar | Item baz | Item zip | . And an ordered list: . | Item one | Item two | Item three | Item four | . And a nested list: . | level 1 item . | level 2 item | level 2 item . | level 3 item | level 3 item | . | . | level 1 item . | level 2 item | level 2 item | level 2 item | . | level 1 item . | level 2 item | level 2 item | . | level 1 item | . Nesting an ol in ul in an ol . | level 1 item (ul) . | level 2 item (ol) | level 2 item (ol) . | level 3 item (ul) | level 3 item (ul) | . | . | level 1 item (ul) . | level 2 item (ol) | level 2 item (ol) . | level 3 item (ul) | level 3 item (ul) | . | level 4 item (ol) | level 4 item (ol) . | level 3 item (ul) | level 3 item (ul) | . | . | level 1 item (ul) | . And a task list . | Hello, this is a TODO item | Hello, this is another TODO item | Goodbye, this item is done | . Small image . Large image . Definition lists can be used with HTML syntax. Name Godzilla Born 1952 Birthplace Japan Color Green Multiple description terms and values . Term Brief description of Term Longer Term Longer description of Term, possibly more than one line Term First description of Term, possibly more than one line Second description of Term, possibly more than one line . Term1 Term2 Single description of Term1 and Term2, possibly more than one line Term1 Term2 First description of Term1 and Term2, possibly more than one line Second description of Term1 and Term2, possibly more than one line . More code . Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. The final element. ",
    "url": "http://localhost:4000/just-the-docs/docs/index-test/#header-2",
    "relUrl": "/docs/index-test/#header-2"
  },"62": {
    "doc": "Markdown kitchen sink",
    "title": "Markdown kitchen sink",
    "content": "Text can be bold, italic, or strikethrough. Link to another page. There should be whitespace between paragraphs. There should be whitespace between paragraphs. We recommend including a README, or a file with information about your project. ",
    "url": "http://localhost:4000/just-the-docs/docs/index-test/",
    "relUrl": "/docs/index-test/"
  },"63": {
    "doc": "Home",
    "title": "Focus on writing good documentation",
    "content": "Just the Docs gives your documentation a jumpstart with a responsive Jekyll theme that is easily customizable and hosted on GitHub Pages. Get started now View it on GitHub . ",
    "url": "http://localhost:4000/just-the-docs/#focus-on-writing-good-documentation",
    "relUrl": "/#focus-on-writing-good-documentation"
  },"64": {
    "doc": "Home",
    "title": "Getting started",
    "content": "Dependencies . Just the Docs is built for Jekyll, a static site generator. View the quick start guide for more information. Just the Docs requires no special plugins and can run on GitHub Pages’ standard Jekyll compiler. The Jekyll SEO Tag plugin is included by default (no need to run any special installation) to inject SEO and open graph metadata on docs pages. For information on how to configure SEO and open graph metadata visit the Jekyll SEO Tag usage guide. Quick start: Use as a GitHub Pages remote theme . | Add Just the Docs to your Jekyll site’s _config.yml as a remote theme remote_theme: pmarsceill/just-the-docs . You must have GitHub Pages enabled on your repo, one or more Markdown files, and a _config.yml file. See an example repository . | . Local installation: Use the gem-based theme . | Install the Ruby Gem $ gem install just-the-docs . # .. or add it to your your Jekyll site’s Gemfile gem \"just-the-docs\" . | Add Just the Docs to your Jekyll site’s _config.yml theme: \"just-the-docs\" . | Optional: Initialize search data (creates search-data.json) $ bundle exec just-the-docs rake search:init . | Run you local Jekyll server $ jekyll serve . # .. or if you're using a Gemfile (bundler) $ bundle exec jekyll serve . | Point your web browser to http://localhost:4000 | . If you’re hosting your site on GitHub Pages, set up GitHub Pages and Jekyll locally so that you can more easily work in your development environment. Configure Just the Docs . | See configuration options | . ",
    "url": "http://localhost:4000/just-the-docs/#getting-started",
    "relUrl": "/#getting-started"
  },"65": {
    "doc": "Home",
    "title": "About the project",
    "content": "Just the Docs is © 2017-2022 by Patrick Marsceill. License . Just the Docs is distributed by an MIT license. Contributing . When contributing to this repository, please first discuss the change you wish to make via issue, email, or any other method with the owners of this repository before making a change. Read more about becoming a contributor in our GitHub repo. Thank you to the contributors of Just the Docs! . Code of Conduct . Just the Docs is committed to fostering a welcoming community. View our Code of Conduct on our GitHub repository. ",
    "url": "http://localhost:4000/just-the-docs/#about-the-project",
    "relUrl": "/#about-the-project"
  },"66": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "http://localhost:4000/just-the-docs/",
    "relUrl": "/"
  },"67": {
    "doc": "DVDManagement",
    "title": "DVDManagement",
    "content": " ",
    "url": "http://localhost:4000/just-the-docs/docs/java/java-sqlite/java-sqlite-dvd-management/",
    "relUrl": "/docs/java/java-sqlite/java-sqlite-dvd-management/"
  },"68": {
    "doc": "DVDManagement",
    "title": "Оглавление",
    "content": ". | Описание | Класс GUI (файл GUI.java) с методом main | Класс TableFunctions (файл TableFunctions.java) | Класс DVDReturn (файл DVDReturn.java) | . ",
    "url": "http://localhost:4000/just-the-docs/docs/java/java-sqlite/java-sqlite-dvd-management/#%D0%BE%D0%B3%D0%BB%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5",
    "relUrl": "/docs/java/java-sqlite/java-sqlite-dvd-management/#оглавление"
  },"69": {
    "doc": "DVDManagement",
    "title": "Описание",
    "content": "Ссылка на источник на GitHub . A Java application, which connects to a sqlite database, with which it is possible to insert, delete, or change entries in the database. The data inside the database is visualy shown in the application. Приложение Java, которое подключается к базе данных sqlite, с помощью которой можно вставлять, удалять или изменять записи в базе данных. Данные внутри базы данных визуально отображаются в приложении. ",
    "url": "http://localhost:4000/just-the-docs/docs/java/java-sqlite/java-sqlite-dvd-management/#%D0%BE%D0%BF%D0%B8%D1%81%D0%B0%D0%BD%D0%B8%D0%B5",
    "relUrl": "/docs/java/java-sqlite/java-sqlite-dvd-management/#описание"
  },"70": {
    "doc": "DVDManagement",
    "title": "Класс GUI (файл GUI.java) с методом main",
    "content": "//https://github.com/eliaskone/Java-SQLite-GUI package sample.net.sqlitetutorial; import javafx.application.Application; import javafx.event.EventHandler; import javafx.scene.Scene; import javafx.scene.control.*; import javafx.scene.control.cell.PropertyValueFactory; import javafx.scene.control.cell.TextFieldTableCell; import javafx.scene.image.Image; import javafx.scene.layout.HBox; import javafx.scene.layout.VBox; import javafx.stage.Stage; import java.sql.Connection; import java.sql.ResultSet; import java.util.ArrayList; public class GUI extends Application { TableView&lt;DVDReturn&gt; tableView = new TableView&lt;&gt;(); int int1, int2; String str1, str2; @Override public void start(Stage primaryStage) { TableFunctions tableFunctions = new TableFunctions(); Connection connection = tableFunctions.connect(); TableFunctions.createNewTable(); tableView.setEditable(true); TableColumn id_colum = new TableColumn(\"id\"); TableColumn titel_colum = new TableColumn(\"titel\"); TableColumn director_colum = new TableColumn(\"director\"); TableColumn year_colum = new TableColumn(\"year\"); Stage stage = primaryStage; HBox hBox = new HBox(); Button buttonAdd = new Button(\"New entry\"); Button buttonDel = new Button(\"Delete entry\"); buttonAdd.setMinSize(100,50); buttonDel.setMinSize(100,50); VBox vBox = new VBox(buttonAdd, buttonDel); ResultSet DataresultSet = tableFunctions.getData(connection); tableView.getColumns().addAll(id_colum, titel_colum, director_colum, year_colum); ArrayList &lt;DVDReturn&gt; dvdData = tableFunctions.createDVDList(DataresultSet); tableView.getItems().addAll(dvdData); id_colum.setCellValueFactory(new PropertyValueFactory&lt;DVDReturn, Integer&gt;(\"id\")); titel_colum.setCellValueFactory(new PropertyValueFactory&lt;DVDReturn, String&gt;(\"titel\")); director_colum.setCellValueFactory(new PropertyValueFactory&lt;DVDReturn, String&gt;(\"director\")); year_colum.setCellValueFactory(new PropertyValueFactory&lt;DVDReturn, Integer&gt;(\"year\")); buttonAdd.setOnAction(e-&gt;{ Button btnConfirm = new Button(\"Confirm\"); TextField txtid = new TextField(); TextField txtTitel = new TextField(); TextField txtDirector = new TextField(); TextField txtYear = new TextField(); Label lblId = new Label(\"ID\"); Label lblTitel = new Label(\"Titel\"); Label lblDirector = new Label(\"Director\"); Label lblYear = new Label(\"Year\"); Label lblSpace = new Label(\"\"); Dialog dialog = new Dialog(); DialogPane dialogPane = new DialogPane(); dialog.setDialogPane(dialogPane); dialogPane.setContent(new VBox(4, new HBox(lblId, txtid), new HBox(lblTitel, txtTitel), new HBox(lblDirector, txtDirector), new HBox(lblYear, txtYear), new HBox(lblSpace), new HBox(lblSpace), new HBox(btnConfirm))); dialogPane.getButtonTypes().add(new ButtonType(\"Cancel\", ButtonBar.ButtonData.CANCEL_CLOSE)); dialog.show(); btnConfirm.setOnAction(event -&gt; { try { int1 = Integer.valueOf(txtid.getText()); str1 = txtTitel.getText(); str2 = txtDirector.getText(); int2 = Integer.valueOf(txtYear.getText()); DVDReturn dvdReturn = new DVDReturn(int1, str1, str2, int2); TableFunctions.dvdArray.add(dvdReturn); TableFunctions.updateRow(int1, str1, str2, int2); tableView.getItems().add(dvdReturn); } catch (NumberFormatException String){ Label lv = new Label(\"Try Again!\"); Dialog dlgNotWorking = new Dialog(); DialogPane dp = new DialogPane(); dlgNotWorking.setDialogPane(dp); dp.setContent(new VBox(4, new HBox(lv))); dp.getButtonTypes().add(new ButtonType(\"Cancel\", ButtonBar.ButtonData.CANCEL_CLOSE)); dlgNotWorking.show(); } }); }); buttonDel.setOnAction(event -&gt; { Label label = new Label(\"Do you really want to delete that Entry?\"); Dialog dialog = new Dialog(); DialogPane dialogPane = new DialogPane(); dialog.setDialogPane(dialogPane); Button btncnfm = new Button(\"Confirm\"); dialogPane.setContent(new VBox(4, new HBox(label), new HBox(btncnfm))); dialogPane.getButtonTypes().add(new ButtonType(\"Cancel\", ButtonBar.ButtonData.CANCEL_CLOSE)); dialog.show(); btncnfm.setOnAction(event1 -&gt; { TableFunctions.delete(tableView.getSelectionModel().getSelectedItem().getId()); DVDReturn slctedentry = tableView.getSelectionModel().getSelectedItem(); tableView.getItems().remove(slctedentry); }); }); titel_colum.setCellFactory(TextFieldTableCell.forTableColumn()); titel_colum.setOnEditCommit(new EventHandler&lt;TableColumn.CellEditEvent&gt;() { @Override public void handle(TableColumn.CellEditEvent event) { EditValues(event, \"titel\"); } }); director_colum.setCellFactory(TextFieldTableCell.forTableColumn()); director_colum.setOnEditCommit(new EventHandler&lt;TableColumn.CellEditEvent&gt;() { @Override public void handle(TableColumn.CellEditEvent event) { EditValues(event, \"director\"); } }); hBox.getChildren().addAll(tableView, vBox); Scene scene = new Scene(hBox); Image Icon = new Image(getClass().getResourceAsStream(\"database3.png\")); stage.setScene(scene); stage.setTitle(\"DVD-Management\"); stage.getIcons().add(Icon); stage.show(); } public void EditValues(TableColumn.CellEditEvent&lt;DVDReturn, String&gt; dvdStringCellEditEvent, String type){ try { DVDReturn dvd = tableView.getSelectionModel().getSelectedItem(); String newVal = dvdStringCellEditEvent.getNewValue(); if(type == \"titel\") { TableFunctions.update(\"titel\", newVal, dvd.getId()); dvd.setTitel(newVal);} else if(type == \"director\"){ TableFunctions.update(\"director\", newVal, dvd.getId()); dvd.setDirector(newVal);} }catch (Exception e){ e.printStackTrace(); } } public static void main(String[] args) { launch(args); } } . ",
    "url": "http://localhost:4000/just-the-docs/docs/java/java-sqlite/java-sqlite-dvd-management/#%D0%BA%D0%BB%D0%B0%D1%81%D1%81-gui-%D1%84%D0%B0%D0%B9%D0%BB-guijava-%D1%81-%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D0%BE%D0%BC-main",
    "relUrl": "/docs/java/java-sqlite/java-sqlite-dvd-management/#класс-gui-файл-guijava-с-методом-main"
  },"71": {
    "doc": "DVDManagement",
    "title": "Класс TableFunctions (файл TableFunctions.java)",
    "content": "package sample.net.sqlitetutorial; import java.nio.file.Path; import java.nio.file.Paths; import java.sql.*; import java.util.ArrayList; public class TableFunctions { static Path currentRelativePath = Paths.get(\"\"); static String s = currentRelativePath.toAbsolutePath().toString(); static ArrayList&lt;DVDReturn&gt;dvdArray = new ArrayList&lt;&gt;(); static ResultSet resultSet = null; public static Connection connect() { // SQLite connection string //String url = \"jdbc:sqlite:\"+s+\"\\\\src\\\\sample\\\\net\\\\sqlitetutorial\\\\dvd.db\"; String url = \"jdbc:sqlite:\"+s+\"\\\\sample\\\\net\\\\sqlitetutorial\\\\dvd.db\"; Connection connection = null; try { Class.forName(\"org.sqlite.JDBC\"); connection = DriverManager.getConnection(url); } catch (ClassNotFoundException | SQLException e) { System.out.println(e.getMessage()); } return connection; } public static void delete(int id) { String sql = \"DELETE FROM DVD WHERE id = ?\"; try (Connection connect = connect(); PreparedStatement del = connect.prepareStatement(sql)) { del.setInt(1, id); del.executeUpdate(); } catch (SQLException e) { System.out.println(e.getMessage()); } } public static void updateRow(int id, String titel, String director, int year){ String sql = \"INSERT INTO DVD VALUES('\"+id+\"', '\"+titel+\"', '\"+director+\"', '\"+year+\"')\"; try (Connection connect = connect(); PreparedStatement updateRow = connect.prepareStatement(sql)){ updateRow.executeUpdate(); }catch (SQLException e) { System.out.println(e.getMessage()); } } public static void update(String index, String content, int id) { String sql = \"UPDATE dvd SET \"+index+\"='\"+content+\"' WHERE id='\"+id+\"';\"; try (Connection connect = connect(); PreparedStatement update = connect.prepareStatement(sql)) { update.executeUpdate(); } catch (SQLException e) { System.out.println(e.getMessage()); } } public static void createNewTable() { //String url = \"jdbc:sqlite:\"+s+\"\\\\src\\\\sample\\\\net\\\\sqlitetutorial\\\\dvd.db\"; String url = \"jdbc:sqlite:\"+s+\"\\\\sample\\\\net\\\\sqlitetutorial\\\\dvd.db\"; String sql = \"CREATE TABLE IF NOT EXISTS DVD (\\n\" + \" id integer PRIMARY KEY,\\n\" + \" titel text NOT NULL,\\n\" + \" director text NOT NULL,\\n\" + \" year integer NOT NULL\\n\" + \");\"; try (Connection connection = DriverManager.getConnection(url); Statement statement = connection.createStatement()) { // create a new table statement.execute(sql); } catch (SQLException e) { System.out.println(e.getMessage()); } } public static ResultSet getData(Connection connection){ String sql = \"Select * from DVD\"; try { PreparedStatement gettingData = connection.prepareStatement(sql); resultSet = gettingData.executeQuery(); System.out.println(resultSet); }catch (SQLException e){ e.printStackTrace(); } return resultSet; } public static ArrayList&lt;DVDReturn&gt; createDVDList(ResultSet resultSet){ try { while (resultSet.next()){ dvdArray.add(new DVDReturn(resultSet.getInt(1),resultSet.getString(2), resultSet.getString(3), resultSet.getInt(4))); } }catch (SQLException e){ e.printStackTrace(); } return dvdArray; } } . ",
    "url": "http://localhost:4000/just-the-docs/docs/java/java-sqlite/java-sqlite-dvd-management/#%D0%BA%D0%BB%D0%B0%D1%81%D1%81-tablefunctions-%D1%84%D0%B0%D0%B9%D0%BB-tablefunctionsjava",
    "relUrl": "/docs/java/java-sqlite/java-sqlite-dvd-management/#класс-tablefunctions-файл-tablefunctionsjava"
  },"72": {
    "doc": "DVDManagement",
    "title": "Класс DVDReturn (файл DVDReturn.java)",
    "content": "package sample.net.sqlitetutorial; import java.util.ArrayList; public class DVDReturn { int id; String titel; String director; int year; DVDReturn(int id, String titel, String director, int year){ this.id = id; this.titel = titel; this.director = director; this.year = year; } public int getId(){ return this.id; } public String getTitel(){ return this.titel; } public String getDirector(){ return this.director; } public int getYear(){ return this.year; } public void setId(int id){ this.id = id; } public void setTitel(String titel){ this.titel = titel; } public void setDirector(String director){ this.director = director; } public void setYear(int year){ this.year = year; } } . ",
    "url": "http://localhost:4000/just-the-docs/docs/java/java-sqlite/java-sqlite-dvd-management/#%D0%BA%D0%BB%D0%B0%D1%81%D1%81-dvdreturn-%D1%84%D0%B0%D0%B9%D0%BB-dvdreturnjava",
    "relUrl": "/docs/java/java-sqlite/java-sqlite-dvd-management/#класс-dvdreturn-файл-dvdreturnjava"
  },"73": {
    "doc": "Руководство SQLite Java",
    "title": "Руководство SQLite Java",
    "content": "Здесь мы узнаем, как использовать SQLite в языке программирования JAVA для подключения базы данных SQLite, операций CREATE Table, INSERT, UPDATE, DELETE и SELECT для таблиц SQLite с использованием драйвера JDBC с примерами. ",
    "url": "http://localhost:4000/just-the-docs/docs/java/java-sqlite/java-sqlite-example-1/",
    "relUrl": "/docs/java/java-sqlite/java-sqlite-example-1/"
  },"74": {
    "doc": "Руководство SQLite Java",
    "title": "Оглавление",
    "content": ". | Java интерфейс SQLite | Подключиться к базе данных SQLite с помощью Java | Создание таблицы в SQLite используя Java | DML операции (Insert, Select, Update, Delete) используя Java | . ",
    "url": "http://localhost:4000/just-the-docs/docs/java/java-sqlite/java-sqlite-example-1/#%D0%BE%D0%B3%D0%BB%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5",
    "relUrl": "/docs/java/java-sqlite/java-sqlite-example-1/#оглавление"
  },"75": {
    "doc": "Руководство SQLite Java",
    "title": "Java интерфейс SQLite",
    "content": "Ссылка на источник . Мы можем легко взаимодействовать с SQLite на языке JAVA, используя драйвер JDBC. Этот драйвер JDBC известен как пакет SQLite-JDBC, который содержит классы JAVA и библиотеки SQLite для выполнения различных операций, таких как подключение к базе данных, создание таблиц, вставка данных в таблицы и т.д. На платформе Windows, Linux и Mac OS. Прежде чем мы приступим к взаимодействию с SQLite с использованием языка JAVA, сначала нам нужно убедиться, что установка JAVA доступна на нашем ПК. В случае, если установка JAVA недоступна, следуйте руководству Java по установке JAVA. Если установка JAVA доступна на нашем ПК, теперь мы установим драйвер SQLite-JDBC для этого загрузите последнюю версию драйвера JDBC sqlite-jdbc-version.jar из доступного списка драйверов JDBC. Теперь нам нужно добавить загруженный файл jar драйвера JDBC (sqlite-jdbc-version.jar) в наш путь к классам, как показано в наших следующих программах. ",
    "url": "http://localhost:4000/just-the-docs/docs/java/java-sqlite/java-sqlite-example-1/#java-%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81-sqlite",
    "relUrl": "/docs/java/java-sqlite/java-sqlite-example-1/#java-интерфейс-sqlite"
  },"76": {
    "doc": "Руководство SQLite Java",
    "title": "Подключиться к базе данных SQLite с помощью Java",
    "content": "Теперь мы подключимся к базе данных SQLite с помощью JAVA, если она существует, в противном случае она создаст новую базу данных, а затем подключится к ней. Ниже приводится программа JAVA, которая используется для подключения к базе данных, если она существует, в противном случае она сначала создаст базу данных, а затем подключится к ней. Файл DBUsingJava.java . import java.sql.*; public class DBUsingJava { public static void main(String args[]) { Connection c = null; try { Class.forName(\"org.sqlite.JDBC\"); c = DriverManager.getConnection(\"jdbc:sqlite:SqliteJavaDB.db\"); } catch (Exception e) { System.err.println(e.getClass().getName() + \": \" + e.getMessage()); System.exit(0); } System.out.println(\"database successfully created\"); } } . Приведенный выше код пытается подключить базу данных SqliteJavaDB.db, если она существует, иначе он создаст новую базу данных по текущему пути, и мы предполагаем, что файл драйвера SQLite sqlite-jdbc-3.8.11.2.jar доступен в том же месте, где существует наша программа. javac DBUsingJava.java java -classpath \".;sqlite-jdbs-3.8.11.2.jar\" SQLiteJDBC database successfully created . Вышеупомянутые операторы скомпилируют и запустят нашу программу для создания файла базы данных SqliteJavaDB.db в текущем каталоге. Если проверить текущий каталог программы, то увидим, что создан один файл с именем SqliteJavaDB.db. ",
    "url": "http://localhost:4000/just-the-docs/docs/java/java-sqlite/java-sqlite-example-1/#%D0%BF%D0%BE%D0%B4%D0%BA%D0%BB%D1%8E%D1%87%D0%B8%D1%82%D1%8C%D1%81%D1%8F-%D0%BA-%D0%B1%D0%B0%D0%B7%D0%B5-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85-sqlite-%D1%81-%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D1%8C%D1%8E-java",
    "relUrl": "/docs/java/java-sqlite/java-sqlite-example-1/#подключиться-к-базе-данных-sqlite-с-помощью-java"
  },"77": {
    "doc": "Руководство SQLite Java",
    "title": "Создание таблицы в SQLite используя Java",
    "content": "Теперь создадим новую таблицу в ранее созданной базе данных с именем SqliteJavaDB.db, используя java, для этого напишите код, как показано ниже. Файл TableUsingJava.java . import java.sql.*; public class TableUsingJava { public static void main(String args[]) { Connection c = null; Statement stmt = null; try { Class.forName(\"org.sqlite.JDBC\"); c = DriverManager.getConnection(\"jdbc:sqlite:SqliteJavaDB.db\"); System.out.println(\"Database Opened...\\n\"); stmt = c.createStatement(); String sql = \"CREATE TABLE Product \" + \"(p_id INTEGER PRIMARY KEY AUTOINCREMENT, \" + \"p_name TEXT NOT NULL, \" + \"price REAL NOT NULL, \" + \"quantity INTEGER)\"; stmt.executeUpdate(sql); stmt.close(); c.close(); } catch (Exception e) { System.err.println(e.getClass().getName() + \": \" + e.getMessage()); System.exit(0); } System.out.println(\"Table Product Created Successfully!!!\"); } } . Приведённый выше код создаёт новую таблицу под названием “Product” в базе данных SqliteJavaDB.db. Теперь скомпилируем и запустим программу, используя следующие команды. javac TableUsingJava.java java -classpath \".;sqlite-jdbc-3.8.11.2.jar\" TableUsingJava Database Opened... Table Product Created Successfully!!! . Приведённые выше операторы скомпилируют и запустят нашу программу, которая создаст таблицу “Product” в нашей базе данных. ",
    "url": "http://localhost:4000/just-the-docs/docs/java/java-sqlite/java-sqlite-example-1/#%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5-%D1%82%D0%B0%D0%B1%D0%BB%D0%B8%D1%86%D1%8B-%D0%B2-sqlite-%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D1%83%D1%8F-java",
    "relUrl": "/docs/java/java-sqlite/java-sqlite-example-1/#создание-таблицы-в-sqlite-используя-java"
  },"78": {
    "doc": "Руководство SQLite Java",
    "title": "DML операции (Insert, Select, Update, Delete) используя Java",
    "content": "Теперь мы попытаемся выполнить операции DML (insert, select, update, delete) над ранее созданной таблицей с именем Product, используя язык JAVA. Следующая программа содержит все 4 операции DML, такие как INSERT, UPDATE, DELETE и SELECT. import java.util.Scanner; import java.sql.*; public class OperationUsingJava { public static void main(String args[]) { String flag = \"Y\"; do { System.out.println(\"Select DML Operation For Product Table...\"); System.out.println(\"1. Insert\"); System.out.println(\"2. Update\"); System.out.println(\"3. Delete\"); System.out.println(\"4. Select\"); System.out.println(\"5. Exit\"); Scanner reader = new Scanner(System.in); System.out.println(\"Enter a choice: \"); int n = reader.nextInt(); Connection c = null; Statement stmt = null; try { Class.forName(\"org.sqlite.JDBC\"); c = DriverManager.getConnection(\"jdbc:sqlite:SqliteJavaDB.db\"); c.setAutoCommit(false); stmt = c.createStatement(); String name = \"\", sql = \"\"; float price = 0.0f; int quantity = 0; int id; Scanner scanName; switch(n) { case 1: scanName = new Scanner(System.in); System.out.println(\"Enter Product Name:\"); name = scanName.nextLine(); System.out.println(\"Enter Product Price:\"); price = scanName.nextFloat(); System.out.println(\"Enter Product Quantity:\"); quantity = scanName.nextInt(); sql = \"INSERT INTO Product (p_name, price, quantity) \" + \"VALUES ('\" + name + \"',\" + price + \",\" + quantity + \")\"; stmt.executeUpdate(sql); System.out.println(\"Inserted Successfully!!!\"); break; case 2: scanName = new Scanner(System.in); System.out.println(\"Enter Product id:\"); id = scanName.nextInt(); System.out.println(\"Enter Product Name:\"); scanName = new Scanner(System.in); name = scanName.nextLine(); System.out.println(\"Enter Product Price:\"); price = scanName.nextFloat(); System.out.println(\"Enter Product Quantity:\"); quantity = scanName.nextInt(); sql = \"UPDATE Product SET p_name = '\" + name + \"', price = \" + price + \", quantity = \" + quantity + \" WHERE p_id = \" + id; stmt.executeUpdate(sql); System.out.println(\"Update Successfully!!!\"); break; case 3: scanName = new Scanner(System.in); System.out.println(\"Enter Product id:\"); id = scanName.nextInt(); sql = \"DELETE FROM Product WHERE p_id = \" + id + \";\"; stmt.executeUpdate(sql); System.out.println(\"Delete Successfully!!!!\"); break; case 4: ResultSet rs = stmt.executeQuery(\"SELECT * FROM Product;\"); System.out.println(\"ID\\t Name\\t\\t Price\\t Qty \"); while (rs.next()) { id = rs.getInt(\"p_id\"); name = rs.getString(\"p_name\"); quantity = rs.getInt(\"quantity\"); price = rs.getFloat(\"price\"); System.out.println(id + \"\\t \" + name + \" \\t \" + price + \"\\t \" + quantity); } rs.close(); break; case 5: System.exit(0); break; default: System.out.println(\"Oops!!! Wrong Choice...\"); break; } stmt.close(); c.commit(); c.close(); } catch (Exception e) { System.err.println(e.getClass().getName() + \": \" + e.getMessage()); System.exit(0); } System.out.println(\"Continue Y OR N?\"); reader = new Scanner(System.in); flag = reader.nextLine(); } while (flag.equalsIgnoreCase(\"Y\")); System.exit(0); } } . Приведённая выше программа выполняет операции INSERT, UPDATE, DELETE и SELECT в таблице “Product”. Теперь скомпилируем и запустим программу, чтобы проверить результат, как показано ниже. javac OperationUsingJava.java java -classpath \".;sqlite-jdbc-3.8.11.2.jar\" OperationUsingJava Select DML Operation For Product Table... 1. Insert 2. Update 3. Delete 4. Select 5. Exit Enter a choice: 1 Enter Product Name: Pencil Enter Product Price: 5 Enter Product Quantity: 50 Inserted Successfully!!! Continue Y OR N? Y Select DML Operation For Product Table... 1. Insert 2. Update 3. Delete 4. Select 5. Exit Enter a choice: 4 ID Name Price Qty ---- ------ ----- ---- 1 Pencil 5.0 50 Continue Y OR N? Y Select DML Operation For Product Table... 1. Insert 2. Update 3. Delete 4. Select 5. Exit Enter a choice: 2 Enter Product id: 1 Enter Product Name: Sharpner Enter Product Price: 10 Enter Product Quantity: 90 Updated Successfully!!! Continue Y OR N? Y Select DML Operation For Product Table... 1. Insert 2. Update 3. Delete 4. Select 5. Exit Enter a choice: 4 ID Name Price Qty ---- -------- ----- ---- 1 Sharpner 10.0 90 Continue Y OR N? Y Select DML Operation For Product Table... 1. Insert 2. Update 3. Delete 4. Select 5. Exit Enter a choice: 1 Enter Product Name: Scale Enter Product Price: 5 Enter Product Quantity: 60 Inserted Successfully!!! Continue Y OR N? Y Select DML Operation For Product Table... 1. Insert 2. Update 3. Delete 4. Select 5. Exit Enter a choice: 4 ID Name Price Qty ---- -------- ---- --- 1 Sharpner 10.0 90 2 Scale 5.0 60 Continue Y OR N? Y Select DML Operation For Product Table... 1. Insert 2. Update 3. Delete 4. Select 5. Exit Enter a choice: 3 Enter Product id: 2 Deleted Successfully!!! Continue Y OR N? y Select DML Operation For Product Table... 1. Insert 2. Update 3. Delete 4. Select 5. Exit Enter a choice: 4 ID Name Price Qty ---- -------- ----- ---- 1 Sharpner 10.0 90 Continue Y OR N? n . Вот так мы можем использовать базу данных SQLite в JAVA для выполнения операций INSERT, UPDATE, DELETE и SELECT в соответствии с нашими требованиями. ",
    "url": "http://localhost:4000/just-the-docs/docs/java/java-sqlite/java-sqlite-example-1/#dml-%D0%BE%D0%BF%D0%B5%D1%80%D0%B0%D1%86%D0%B8%D0%B8-insert-select-update-delete-%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D1%83%D1%8F-java",
    "relUrl": "/docs/java/java-sqlite/java-sqlite-example-1/#dml-операции-insert-select-update-delete-используя-java"
  },"79": {
    "doc": "Java and SQLite",
    "title": "Java and SQLite",
    "content": "Пишем на Java приложения, для работы с данными, используя СУБД SQLite. ",
    "url": "http://localhost:4000/just-the-docs/docs/java/java-sqlite",
    "relUrl": "/docs/java/java-sqlite"
  },"80": {
    "doc": "Java",
    "title": "Java",
    "content": "Язык Java был разработан (с 1991 по 1995 год) инженерами компании Sun Microsystems, которую затем поглотила корпорация Oracle (www.oracle.com). ",
    "url": "http://localhost:4000/just-the-docs/docs/java",
    "relUrl": "/docs/java"
  },"81": {
    "doc": "Labels",
    "title": "Labels",
    "content": "Use labels as a way to add an additional mark to a section of your docs. Labels come in a few colors. By default, labels will be blue. Default label . Blue label . Stable . New release . Coming soon . Deprecated . Default label {: .label } Blue label {: .label .label-blue } Stable {: .label .label-green } New release {: .label .label-purple } Coming soon {: .label .label-yellow } Deprecated {: .label .label-red } . ",
    "url": "http://localhost:4000/just-the-docs/docs/ui-components/labels/",
    "relUrl": "/docs/ui-components/labels/"
  },"82": {
    "doc": "Layout",
    "title": "Layout Utilities",
    "content": " ",
    "url": "http://localhost:4000/just-the-docs/docs/utilities/layout/#layout-utilities",
    "relUrl": "/docs/utilities/layout/#layout-utilities"
  },"83": {
    "doc": "Layout",
    "title": "Table of contents",
    "content": ". | Spacing | Horizontal Alignment | Vertical Alignment | Display | . ",
    "url": "http://localhost:4000/just-the-docs/docs/utilities/layout/#table-of-contents",
    "relUrl": "/docs/utilities/layout/#table-of-contents"
  },"84": {
    "doc": "Layout",
    "title": "Spacing",
    "content": "These spacers are available to use for margins and padding with responsive utility classes. Combine these prefixes with a screen size and spacing scale to use them responsively. | Classname prefix | What it does | . | .m- | margin | . | .mx- | margin-left, margin-right | . | .my- | margin top, margin bottom | . | .mt- | margin-top | . | .mr- | margin-right | . | .mb- | margin-bottom | . | .ml- | margin-left | . | Classname prefix | What it does | . | .p- | padding | . | .px- | padding-left, padding-right | . | .py- | padding top, padding bottom | . | .pt- | padding-top | . | .pr- | padding-right | . | .pb- | padding-bottom | . | .pl- | padding-left | . Spacing values are based on a 1rem = 16px spacing scale, broken down into these units: . | Spacer/suffix | Size in rems | Rem converted to px | . | 1 | 0.25rem | 4px | . | 2 | 0.5rem | 8px | . | 3 | 0.75rem | 12px | . | 4 | 1rem | 16px | . | 5 | 1.5rem | 24px | . | 6 | 2rem | 32px | . | 7 | 2.5rem | 40px | . | 8 | 3rem | 48px | . | auto | auto | auto | . Use mx-auto to horizontally center elements. Examples . In Markdown, use the {: } wrapper to apply custom classes: . This paragraph will have a margin bottom of 1rem/16px at large screens. {: .mb-lg-4 } This paragraph will have 2rem/32px of padding on the right and left at all screen sizes. {: .px-6 } . ",
    "url": "http://localhost:4000/just-the-docs/docs/utilities/layout/#spacing",
    "relUrl": "/docs/utilities/layout/#spacing"
  },"85": {
    "doc": "Layout",
    "title": "Horizontal Alignment",
    "content": "| Classname | What it does | . | .float-left | float: left | . | .float-right | float: right | . | .flex-justify-start | justify-content: flex-start | . | .flex-justify-end | justify-content: flex-end | . | .flex-justify-between | justify-content: space-between | . | .flex-justify-around | justify-content: space-around | . Note: any of the flex- classes must be used on a parent element that has d-flex applied to it. ",
    "url": "http://localhost:4000/just-the-docs/docs/utilities/layout/#horizontal-alignment",
    "relUrl": "/docs/utilities/layout/#horizontal-alignment"
  },"86": {
    "doc": "Layout",
    "title": "Vertical Alignment",
    "content": "| Classname | What it does | . | .v-align-baseline | vertical-align: baseline | . | .v-align-bottom | vertical-align: bottom | . | .v-align-middle | vertical-align: middle | . | .v-align-text-bottom | vertical-align: text-bottom | . | .v-align-text-top | vertical-align: text-top | . | .v-align-top | vertical-align: top | . ",
    "url": "http://localhost:4000/just-the-docs/docs/utilities/layout/#vertical-alignment",
    "relUrl": "/docs/utilities/layout/#vertical-alignment"
  },"87": {
    "doc": "Layout",
    "title": "Display",
    "content": "Display classes aid in adapting the layout of the elements on a page: . | Class |   | . | .d-block | display: block | . | .d-flex | display: flex | . | .d-inline | display: inline | . | .d-inline-block | display: inline-block | . | .d-none | display: none | . Use these classes in conjunction with the responsive modifiers. Examples . In Markdown, use the {: } wrapper to apply custom classes: . This button will be hidden until medium screen sizes: [ A button ](#url) {: .d-none .d-md-inline-block } These headings will be `inline-block`: ### heading 3 {: .d-inline-block } ### heading 3 {: .d-inline-block } . ",
    "url": "http://localhost:4000/just-the-docs/docs/utilities/layout/#display",
    "relUrl": "/docs/utilities/layout/#display"
  },"88": {
    "doc": "Layout",
    "title": "Layout",
    "content": " ",
    "url": "http://localhost:4000/just-the-docs/docs/utilities/layout/",
    "relUrl": "/docs/utilities/layout/"
  },"89": {
    "doc": "Code with line numbers",
    "title": "Code snippets with line numbers",
    "content": "The default settings for HTML compression are incompatible with the HTML produced by Jekyll (4.1.1 or earlier) for line numbers from highlighted code – both when using Kramdown code fences and when using Liquid highlight tags. To avoid non-conforming HTML and unsatisfactory layout, HTML compression can be turned off by using the following configuration option: . compress_html: ignore: envs: all . When using Kramdown code fences, line numbers are turned on globally by the following configuration option: . kramdown: syntax_highlighter_opts: block: line_numbers: true . Line numbers can then be suppressed locally using Liquid tags (without the linenos option) instead of fences: . {% highlight some_language %} Some code {% endhighlight %} . ",
    "url": "http://localhost:4000/just-the-docs/docs/ui-components/code/line-numbers/#code-snippets-with-line-numbers",
    "relUrl": "/docs/ui-components/code/line-numbers/#code-snippets-with-line-numbers"
  },"90": {
    "doc": "Code with line numbers",
    "title": "Workarounds",
    "content": "To use HTML compression together with line numbers, all highlighted code needs to be wrapped using one of the following workarounds. (The variable name some_var can be changed to avoid clashes; it can also be replaced by code – but note that code=code cannot be removed). Code fences (three backticks) . {% capture some_var %} ```some_language Some code ``` {% endcapture %} {% assign some_var = some_var | markdownify %} {% include fix_linenos.html code=some_var %} . Liquid highlighting . {% capture some_var %} {% highlight some_language linenos %} Some code {% endhighlight %} {% endcapture %} {% include fix_linenos.html code=some_var %} . Credit: The original version of the above workaround was suggested by Dmitry Hrabrov at https://github.com/penibelst/jekyll-compress-html/issues/71#issuecomment-188144901. ",
    "url": "http://localhost:4000/just-the-docs/docs/ui-components/code/line-numbers/#workarounds",
    "relUrl": "/docs/ui-components/code/line-numbers/#workarounds"
  },"91": {
    "doc": "Code with line numbers",
    "title": "Examples",
    "content": "✅ Using code fences + workaround (will only show line numbers if enabled globally in _config.yml): . // Javascript code with syntax highlighting in fences var fun = function lang(l) { dateformat.i18n = require('./lang/' + l) return true; } . ✅ Using liquid highlighting + workaround: . | 1 2 3 4 . | # Ruby code with syntax highlighting and fixed line numbers using Liquid GitHubPages::Dependencies.gems.each do |gem, version| s.add_dependency(gem, \"= #{version}\") end . | . ❌ With the default configuration options, the following example illustrates the incorrect formatting arising from the incompatibility of HTML compression and the non-conforming HTML produced by Jekyll for line numbers: . | 1 2 3 4 . | # Ruby code with syntax highlighting and unfixed line numbers using Liquid GitHubPages::Dependencies.gems.each do |gem, version| s.add_dependency(gem, \"= #{version}\") end . | . ",
    "url": "http://localhost:4000/just-the-docs/docs/ui-components/code/line-numbers/#examples",
    "relUrl": "/docs/ui-components/code/line-numbers/#examples"
  },"92": {
    "doc": "Code with line numbers",
    "title": "Code with line numbers",
    "content": " ",
    "url": "http://localhost:4000/just-the-docs/docs/ui-components/code/line-numbers/",
    "relUrl": "/docs/ui-components/code/line-numbers/"
  },"93": {
    "doc": "Lists",
    "title": "Lists",
    "content": " ",
    "url": "http://localhost:4000/just-the-docs/docs/ui-components/lists/",
    "relUrl": "/docs/ui-components/lists/"
  },"94": {
    "doc": "Lists",
    "title": "Table of contents",
    "content": ". | Unordered list | Ordered list | Task list | Definition list | . Most lists can be rendered with pure Markdown. ",
    "url": "http://localhost:4000/just-the-docs/docs/ui-components/lists/#table-of-contents",
    "relUrl": "/docs/ui-components/lists/#table-of-contents"
  },"95": {
    "doc": "Lists",
    "title": "Unordered list",
    "content": ". | Item 1 | Item 2 | Item 3 | . or . | Item 1 | Item 2 | Item 3 | . - Item 1 - Item 2 - Item 3 _or_ * Item 1 * Item 2 * Item 3 . ",
    "url": "http://localhost:4000/just-the-docs/docs/ui-components/lists/#unordered-list",
    "relUrl": "/docs/ui-components/lists/#unordered-list"
  },"96": {
    "doc": "Lists",
    "title": "Ordered list",
    "content": ". | Item 1 | Item 2 | Item 3 | . 1. Item 1 1. Item 2 1. Item 3 . ",
    "url": "http://localhost:4000/just-the-docs/docs/ui-components/lists/#ordered-list",
    "relUrl": "/docs/ui-components/lists/#ordered-list"
  },"97": {
    "doc": "Lists",
    "title": "Task list",
    "content": ". | hello, this is a todo item | hello, this is another todo item | goodbye, this item is done | . - [ ] hello, this is a todo item - [ ] hello, this is another todo item - [x] goodbye, this item is done . ",
    "url": "http://localhost:4000/just-the-docs/docs/ui-components/lists/#task-list",
    "relUrl": "/docs/ui-components/lists/#task-list"
  },"98": {
    "doc": "Lists",
    "title": "Definition list",
    "content": "Definition lists require HTML syntax and aren’t supported with the GitHub Flavored Markdown compiler. Name Godzilla Born 1952 Birthplace Japan Color Green &lt;dl&gt; &lt;dt&gt;Name&lt;/dt&gt; &lt;dd&gt;Godzilla&lt;/dd&gt; &lt;dt&gt;Born&lt;/dt&gt; &lt;dd&gt;1952&lt;/dd&gt; &lt;dt&gt;Birthplace&lt;/dt&gt; &lt;dd&gt;Japan&lt;/dd&gt; &lt;dt&gt;Color&lt;/dt&gt; &lt;dd&gt;Green&lt;/dd&gt; &lt;/dl&gt; . ",
    "url": "http://localhost:4000/just-the-docs/docs/ui-components/lists/#definition-list",
    "relUrl": "/docs/ui-components/lists/#definition-list"
  },"99": {
    "doc": "Авиамодели",
    "title": "Авиамодели",
    "content": "Представлены следующие авиамодели . ",
    "url": "http://localhost:4000/just-the-docs/docs/model-aircrafts",
    "relUrl": "/docs/model-aircrafts"
  },"100": {
    "doc": "Navigation Structure",
    "title": "Navigation Structure",
    "content": ". | Main navigation | Ordering pages | Excluding pages | Pages with children . | Child pages | Auto-generating Table of Contents | Children with children | . | Auxiliary Links | In-page navigation with Table of Contents . | Collapsible Table of Contents | . | . ",
    "url": "http://localhost:4000/just-the-docs/docs/navigation-structure/",
    "relUrl": "/docs/navigation-structure/"
  },"101": {
    "doc": "Navigation Structure",
    "title": "Main navigation",
    "content": "The main navigation for your Just the Docs site is on the left side of the page at large screens and on the top (behind a tap) on small screens. The main navigation can be structured to accommodate a multi-level menu system (pages with children and grandchildren). By default, all pages will appear as top level pages in the main nav unless a parent page is defined (see Pages with Children). ",
    "url": "http://localhost:4000/just-the-docs/docs/navigation-structure/#main-navigation",
    "relUrl": "/docs/navigation-structure/#main-navigation"
  },"102": {
    "doc": "Navigation Structure",
    "title": "Ordering pages",
    "content": "To specify a page order, you can use the nav_order parameter in your pages’ YAML front matter. Example . --- layout: default title: Customization nav_order: 4 --- . The parameter values determine the order of the top-level pages, and of child pages with the same parent. You can reuse the same parameter values (e.g., integers starting from 1) for the child pages of different parents. The parameter values can be numbers (integers, floats) and/or strings. When you omit nav_order parameters, they default to the titles of the pages, which are ordered alphabetically. Pages with numerical nav_order parameters always come before those with strings or default nav_order parameters. If you want to make the page order independent of the page titles, you can set explicit nav_order parameters on all pages. By default, all Capital letters come before all lowercase letters; you can add nav_sort: case_insensitive in the configuration file to ignore the case. Enclosing strings in quotation marks is optional. Note for users of previous versions: nav_sort: case_insensitive previously affected the ordering of numerical nav_order parameters: e.g., 10 came before 2. Also, all pages with explicit nav_order parameters previously came before all pages with default parameters. Both were potentially confusing, and they have now been eliminated. ",
    "url": "http://localhost:4000/just-the-docs/docs/navigation-structure/#ordering-pages",
    "relUrl": "/docs/navigation-structure/#ordering-pages"
  },"103": {
    "doc": "Navigation Structure",
    "title": "Excluding pages",
    "content": "For specific pages that you do not wish to include in the main navigation, e.g. a 404 page or a landing page, use the nav_exclude: true parameter in the YAML front matter for that page. Example . --- layout: default title: 404 nav_exclude: true --- . The nav_exclude parameter does not affect the auto-generating list of child pages, which you can use to access pages excluded from the main navigation. Pages with no title are automatically excluded from the navigation. ",
    "url": "http://localhost:4000/just-the-docs/docs/navigation-structure/#excluding-pages",
    "relUrl": "/docs/navigation-structure/#excluding-pages"
  },"104": {
    "doc": "Navigation Structure",
    "title": "Pages with children",
    "content": "Sometimes you will want to create a page with many children (a section). First, it is recommended that you keep pages that are related in a directory together… For example, in these docs, we keep all of the written documentation in the ./docs directory and each of the sections in subdirectories like ./docs/ui-components and ./docs/utilities. This gives us an organization like: . +-- .. |-- (Jekyll files) |-- docs |-- ui-components | |-- index.md (parent page) | |-- buttons.md | |-- code.md | |-- labels.md | |-- tables.md | +-- typography.md | |-- utilities | |-- index.md (parent page) | |-- color.md | |-- layout.md | |-- responsive-modifiers.md | +-- typography.md | |-- (other md files, pages with no children) | +-- .. |-- (Jekyll files) +-- .. On the parent pages, add this YAML front matter parameter: . | has_children: true (tells us that this is a parent page) | . Example . --- layout: default title: UI Components nav_order: 2 has_children: true --- . Here we’re setting up the UI Components landing page that is available at /docs/ui-components, which has children and is ordered second in the main nav. Child pages . On child pages, simply set the parent: YAML front matter to whatever the parent’s page title is and set a nav order (this number is now scoped within the section). Example . --- layout: default title: Buttons parent: UI Components nav_order: 2 --- . The Buttons page appears as a child of UI Components and appears second in the UI Components section. Auto-generating Table of Contents . By default, all pages with children will automatically append a Table of Contents which lists the child pages after the parent page’s content. To disable this auto Table of Contents, set has_toc: false in the parent page’s YAML front matter. Example . --- layout: default title: UI Components nav_order: 2 has_children: true has_toc: false --- . Children with children . Child pages can also have children (grandchildren). This is achieved by using a similar pattern on the child and grandchild pages. | Add the has_children attribute to the child | Add the parent and grand_parent attribute to the grandchild | . Example . --- layout: default title: Buttons parent: UI Components nav_order: 2 has_children: true --- . --- layout: default title: Buttons Child Page parent: Buttons grand_parent: UI Components nav_order: 1 --- . This would create the following navigation structure: . +-- .. |-- UI Components |-- .. | |-- Buttons | |-- Button Child Page | |-- .. | +-- .. ",
    "url": "http://localhost:4000/just-the-docs/docs/navigation-structure/#pages-with-children",
    "relUrl": "/docs/navigation-structure/#pages-with-children"
  },"105": {
    "doc": "Navigation Structure",
    "title": "Auxiliary Links",
    "content": "To add auxiliary links to your site (in the upper right on all pages), add it to the aux_links configuration option in your site’s _config.yml file. Example . # Aux links for the upper right navigation aux_links: \"Just the Docs on GitHub\": - \"//github.com/pmarsceill/just-the-docs\" . ",
    "url": "http://localhost:4000/just-the-docs/docs/navigation-structure/#auxiliary-links",
    "relUrl": "/docs/navigation-structure/#auxiliary-links"
  },"106": {
    "doc": "Navigation Structure",
    "title": "In-page navigation with Table of Contents",
    "content": "To generate a Table of Contents on your docs pages, you can use the {:toc} method from Kramdown, immediately after an &lt;ol&gt; in Markdown. This will automatically generate an ordered list of anchor links to various sections of the page based on headings and heading levels. There may be occasions where you’re using a heading and you don’t want it to show up in the TOC, so to skip a particular heading use the {: .no_toc } CSS class. Example . # Navigation Structure {: .no_toc } ## {: .no_toc .text-delta } 1. TOC {:toc} . This example skips the page name heading (#) from the TOC, as well as the heading for the Table of Contents itself (##) because it is redundant, followed by the table of contents itself. To get an unordered list, replace 1. TOC above by - TOC. Collapsible Table of Contents . The Table of Contents can be made collapsible using the &lt;details&gt; and &lt;summary&gt; elements , as in the following example. The attribute open (expands the Table of Contents by default) and the styling with {: .text-delta } are optional. &lt;details open markdown=\"block\"&gt; &lt;summary&gt; &lt;/summary&gt; {: .text-delta } 1. TOC {:toc} &lt;/details&gt; . The result is shown at the top of this page ({:toc} can be used only once on each page). ",
    "url": "http://localhost:4000/just-the-docs/docs/navigation-structure/#in-page-navigation-with-table-of-contents",
    "relUrl": "/docs/navigation-structure/#in-page-navigation-with-table-of-contents"
  },"107": {
    "doc": "Olimpic 650 electric sailplane",
    "title": "Электропланер “Olimpic 650”",
    "content": " ",
    "url": "http://localhost:4000/just-the-docs/docs/model-aircrafts/olimpic-650-electric-sailplane/olimpic-650-electric-sailplane/#%D1%8D%D0%BB%D0%B5%D0%BA%D1%82%D1%80%D0%BE%D0%BF%D0%BB%D0%B0%D0%BD%D0%B5%D1%80-olimpic-650",
    "relUrl": "/docs/model-aircrafts/olimpic-650-electric-sailplane/olimpic-650-electric-sailplane/#электропланер-olimpic-650"
  },"108": {
    "doc": "Olimpic 650 electric sailplane",
    "title": "Оглавление",
    "content": ". | Введение | . ",
    "url": "http://localhost:4000/just-the-docs/docs/model-aircrafts/olimpic-650-electric-sailplane/olimpic-650-electric-sailplane/#%D0%BE%D0%B3%D0%BB%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5",
    "relUrl": "/docs/model-aircrafts/olimpic-650-electric-sailplane/olimpic-650-electric-sailplane/#оглавление"
  },"109": {
    "doc": "Olimpic 650 electric sailplane",
    "title": "Введение",
    "content": "Эту модель спроектировал Ли Ренауд (Lee Renaud). Модифицировал под бесколлекторный электродвигатель Джон Торрансе (John Torrance) в декабре 2020 года. ",
    "url": "http://localhost:4000/just-the-docs/docs/model-aircrafts/olimpic-650-electric-sailplane/olimpic-650-electric-sailplane/#%D0%B2%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5",
    "relUrl": "/docs/model-aircrafts/olimpic-650-electric-sailplane/olimpic-650-electric-sailplane/#введение"
  },"110": {
    "doc": "Olimpic 650 electric sailplane",
    "title": "Olimpic 650 electric sailplane",
    "content": " ",
    "url": "http://localhost:4000/just-the-docs/docs/model-aircrafts/olimpic-650-electric-sailplane/olimpic-650-electric-sailplane/",
    "relUrl": "/docs/model-aircrafts/olimpic-650-electric-sailplane/olimpic-650-electric-sailplane/"
  },"111": {
    "doc": "Orders",
    "title": "Orders",
    "content": " ",
    "url": "http://localhost:4000/just-the-docs/docs/orders",
    "relUrl": "/docs/orders"
  },"112": {
    "doc": "Responsive Modifiers",
    "title": "Responsive modifiers",
    "content": "Just the Docs spacing works in conjunction with a variety of modifiers that allow you to target specific screen sizes responsively. Use these in conjunction with spacing and display prefix and suffix classes. | Modifier | Screen size | . | (none) | All screens until the next modifier | . | xs | 320px (20rem) and up | . | sm | 500px (31.25rem) and up | . | md | 740px (46.25rem) and up | . | lg | 1120px (70rem) and up | . | xl | 1400px (87.5rem) and up | . ",
    "url": "http://localhost:4000/just-the-docs/docs/utilities/responsive-modifiers/#responsive-modifiers",
    "relUrl": "/docs/utilities/responsive-modifiers/#responsive-modifiers"
  },"113": {
    "doc": "Responsive Modifiers",
    "title": "Responsive Modifiers",
    "content": " ",
    "url": "http://localhost:4000/just-the-docs/docs/utilities/responsive-modifiers/",
    "relUrl": "/docs/utilities/responsive-modifiers/"
  },"114": {
    "doc": "Search",
    "title": "Search",
    "content": " ",
    "url": "http://localhost:4000/just-the-docs/docs/search/",
    "relUrl": "/docs/search/"
  },"115": {
    "doc": "Search",
    "title": "Table of contents",
    "content": ". | Enable search in configuration . | Search granularity | Search previews | Search tokenizer | Display URL in search results | Display search button | . | Hiding pages from search | Generate search index when used as a gem | . Just the Docs uses lunr.js to add a client-side search interface powered by a JSON index that Jekyll generates. All search results are shown in an auto-complete style interface (there is no search results page). By default, all generated HTML pages are indexed using the following data points: . | Page title | Page content | Page URL | . ",
    "url": "http://localhost:4000/just-the-docs/docs/search/#table-of-contents",
    "relUrl": "/docs/search/#table-of-contents"
  },"116": {
    "doc": "Search",
    "title": "Enable search in configuration",
    "content": "In your site’s _config.yml, enable search: . # Enable or disable the site search # Supports true (default) or false search_enabled: true . Search granularity . Pages are split into sections that can be searched individually. The sections are defined by the headings on the page. Each section is displayed in a separate search result. # Split pages into sections that can be searched individually # Supports 1 - 6, default: 2 search.heading_level: 2 . Search previews . A search result can contain previews that show where the search words are found in the specific section. # Maximum amount of previews per search result # Default: 3 search.previews: 3 # Maximum amount of words to display before a matched word in the preview # Default: 5 search.preview_words_before: 5 # Maximum amount of words to display after a matched word in the preview # Default: 10 search.preview_words_after: 10 . Search tokenizer . The default is for hyphens to separate tokens in search terms: gem-based is equivalent to gem based, matching either word. To allow search for hyphenated words: . # Set the search token separator # Default: /[\\s\\-/]+/ # Example: enable support for hyphenated search words search.tokenizer_separator: /[\\s/]+/ . Display URL in search results . # Display the relative url in search results # Supports true (default) or false search.rel_url: false . Display search button . The search button displays in the bottom right corner of the screen and triggers the search input when clicked. # Enable or disable the search button that appears in the bottom right corner of every page # Supports true or false (default) search.button: true . ",
    "url": "http://localhost:4000/just-the-docs/docs/search/#enable-search-in-configuration",
    "relUrl": "/docs/search/#enable-search-in-configuration"
  },"117": {
    "doc": "Search",
    "title": "Hiding pages from search",
    "content": "Sometimes you might have a page that you don’t want to be indexed for the search nor to show up in search results, e.g, a 404 page. To exclude a page from search, add the search_exclude: true parameter to the page’s YAML front matter: . Example . --- layout: default title: Page not found nav_exclude: true search_exclude: true --- . ",
    "url": "http://localhost:4000/just-the-docs/docs/search/#hiding-pages-from-search",
    "relUrl": "/docs/search/#hiding-pages-from-search"
  },"118": {
    "doc": "Search",
    "title": "Generate search index when used as a gem",
    "content": "If you use Just the Docs as a remote theme, you do not need the following steps. If you use the theme as a gem, you must initialize the search by running this rake command that comes with just-the-docs: . $ bundle exec just-the-docs rake search:init . This command creates the assets/js/zzzz-search-data.json file that Jekyll uses to create your search index. Alternatively, you can create the file manually with this content. ",
    "url": "http://localhost:4000/just-the-docs/docs/search/#generate-search-index-when-used-as-a-gem",
    "relUrl": "/docs/search/#generate-search-index-when-used-as-a-gem"
  },"119": {
    "doc": "Tables",
    "title": "Tables",
    "content": "Tables are responsive by default, allowing wide tables to have a horizontal scroll to access columns outside of the normal viewport. | head1 | head two | three | . | ok | good swedish fish | nice | . | out of stock | good and plenty | nice | . | ok | good oreos | hmm | . | ok | good zoute drop | yumm | . | head1 | head two | three |:-------------|:------------------|:------| ok | good swedish fish | nice | out of stock | good and plenty | nice | ok | good `oreos` | hmm | ok | good `zoute` drop | yumm | . ",
    "url": "http://localhost:4000/just-the-docs/docs/ui-components/tables/",
    "relUrl": "/docs/ui-components/tables/"
  },"120": {
    "doc": "Typography",
    "title": "Typography",
    "content": " ",
    "url": "http://localhost:4000/just-the-docs/docs/ui-components/typography/",
    "relUrl": "/docs/ui-components/typography/"
  },"121": {
    "doc": "Typography",
    "title": "Table of contents",
    "content": ". | Font stack | Responsive type scale | Headings | Body text | Inline elements | Typographic Utilities | . ",
    "url": "http://localhost:4000/just-the-docs/docs/ui-components/typography/#table-of-contents",
    "relUrl": "/docs/ui-components/typography/#table-of-contents"
  },"122": {
    "doc": "Typography",
    "title": "Font stack",
    "content": "By default, Just the Docs uses a native system font stack for sans-serif fonts: . system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif . ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz . For monospace type, like code snippets or the &lt;pre&gt; element, Just the Docs uses a native system font stack for monospace fonts: . \"SFMono-Regular\", Menlo, Consolas, Monospace . ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz . ",
    "url": "http://localhost:4000/just-the-docs/docs/ui-components/typography/#font-stack",
    "relUrl": "/docs/ui-components/typography/#font-stack"
  },"123": {
    "doc": "Typography",
    "title": "Responsive type scale",
    "content": "Just the Docs uses a responsive type scale that shifts depending on the viewport size. | Selector | Small screen size font-size | Large screen size font-size | . | h1, .text-alpha | 32px | 36px | . | h2, .text-beta | 18px | 24px | . | h3, .text-gamma | 16px | 18px | . | h4, .text-delta | 14px | 16px | . | h5, .text-epsilon | 16px | 18px | . | h6, .text-zeta | 18px | 24px | . | body | 14px | 16px | . ",
    "url": "http://localhost:4000/just-the-docs/docs/ui-components/typography/#responsive-type-scale",
    "relUrl": "/docs/ui-components/typography/#responsive-type-scale"
  },"124": {
    "doc": "Typography",
    "title": "Headings",
    "content": "Headings are rendered like this: . ",
    "url": "http://localhost:4000/just-the-docs/docs/ui-components/typography/#headings",
    "relUrl": "/docs/ui-components/typography/#headings"
  },"125": {
    "doc": "Typography",
    "title": "Heading 1",
    "content": " ",
    "url": "http://localhost:4000/just-the-docs/docs/ui-components/typography/",
    "relUrl": "/docs/ui-components/typography/"
  },"126": {
    "doc": "Typography",
    "title": "Heading 2",
    "content": "Heading 3 . Heading 4 . Heading 5 . Heading 6 . # Heading 1 ## Heading 2 ### Heading 3 #### Heading 4 ##### Heading 5 ###### Heading 6 . ",
    "url": "http://localhost:4000/just-the-docs/docs/ui-components/typography/",
    "relUrl": "/docs/ui-components/typography/"
  },"127": {
    "doc": "Typography",
    "title": "Body text",
    "content": "Default body text is rendered like this: . Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. ",
    "url": "http://localhost:4000/just-the-docs/docs/ui-components/typography/#body-text",
    "relUrl": "/docs/ui-components/typography/#body-text"
  },"128": {
    "doc": "Typography",
    "title": "Inline elements",
    "content": "Text can be bold, italic, or strikethrough. Link to another page. Text can be **bold**, _italic_, or ~~strikethrough~~. [Link to another page](another-page). ",
    "url": "http://localhost:4000/just-the-docs/docs/ui-components/typography/#inline-elements",
    "relUrl": "/docs/ui-components/typography/#inline-elements"
  },"129": {
    "doc": "Typography",
    "title": "Typographic Utilities",
    "content": "There are a number of specific typographic CSS classes that allow you to override default styling for font size, font weight, line height, and capitalization. View typography utilities . ",
    "url": "http://localhost:4000/just-the-docs/docs/ui-components/typography/#typographic-utilities",
    "relUrl": "/docs/ui-components/typography/#typographic-utilities"
  },"130": {
    "doc": "Typography",
    "title": "Typography Utilities",
    "content": " ",
    "url": "http://localhost:4000/just-the-docs/docs/utilities/typography/#typography-utilities",
    "relUrl": "/docs/utilities/typography/#typography-utilities"
  },"131": {
    "doc": "Typography",
    "title": "Table of contents",
    "content": ". | Font size | Font weight | Line height | Text justification | . ",
    "url": "http://localhost:4000/just-the-docs/docs/utilities/typography/#table-of-contents",
    "relUrl": "/docs/utilities/typography/#table-of-contents"
  },"132": {
    "doc": "Typography",
    "title": "Font size",
    "content": "Use the .fs-1 - .fs-10 to set an explicit font-size. | Class | Small screen size font-size | Large screen size font-size | . | .fs-1 | 9px | 10px | . | .fs-2 | 11px | 12px | . | .fs-3 | 12px | 14px | . | .fs-4 | 14px | 16px | . | .fs-5 | 16px | 18px | . | .fs-6 | 18px | 24px | . | .fs-7 | 24px | 32px | . | .fs-8 | 32px | 38px | . | .fs-9 | 38px | 42px | . | .fs-10 | 42px | 48px | . Font size 1 . Font size 2 . Font size 3 . Font size 4 . Font size 5 . Font size 6 . Font size 7 . Font size 8 . Font size 9 . Font size 10 . In Markdown, use the `{: }` wrapper to apply custom classes: Font size 1 {: .fs-1 } Font size 2 {: .fs-2 } Font size 3 {: .fs-3 } Font size 4 {: .fs-4 } Font size 5 {: .fs-5 } Font size 6 {: .fs-6 } Font size 7 {: .fs-7 } Font size 8 {: .fs-8 } Font size 9 {: .fs-9 } Font size 10 {: .fs-10 } . ",
    "url": "http://localhost:4000/just-the-docs/docs/utilities/typography/#font-size",
    "relUrl": "/docs/utilities/typography/#font-size"
  },"133": {
    "doc": "Typography",
    "title": "Font weight",
    "content": "Use the .fw-300 - .fw-700 to set an explicit font-size. Font weight 300 . Font weight 400 . Font weight 500 . Font weight 700 . In Markdown, use the `{: }` wrapper to apply custom classes: Font weight 300 {: .fw-300 } Font weight 400 {: .fw-400 } Font weight 500 {: .fw-500 } Font weight 700 {: .fw-700 } . ",
    "url": "http://localhost:4000/just-the-docs/docs/utilities/typography/#font-weight",
    "relUrl": "/docs/utilities/typography/#font-weight"
  },"134": {
    "doc": "Typography",
    "title": "Line height",
    "content": "Use the lh- classes to explicitly apply line height to text. | Class | line-height value | Notes | . | .lh-0 | 0 |   | . | .lh-tight | 1.1 | Default for headings | . | .lh-default | 1.4 | Default for body (paragraphs) | . No Line height No Line height . Tight line height Tight line height . Default line height Default line height . In Markdown, use the `{: }` wrapper to apply custom classes: No Line height No Line height {: .lh-0 } Tight line height Tight line height {: .lh-tight } Default line height Default line height {: .fh-default } . ",
    "url": "http://localhost:4000/just-the-docs/docs/utilities/typography/#line-height",
    "relUrl": "/docs/utilities/typography/#line-height"
  },"135": {
    "doc": "Typography",
    "title": "Text justification",
    "content": "By default text is justified left. Use these text- classes to override settings: . | Class | What it does | . | .text-left | text-align: left | . | .text-right | text-align: right | . | .text-center | text-align: center | . ",
    "url": "http://localhost:4000/just-the-docs/docs/utilities/typography/#text-justification",
    "relUrl": "/docs/utilities/typography/#text-justification"
  },"136": {
    "doc": "Typography",
    "title": "Typography",
    "content": " ",
    "url": "http://localhost:4000/just-the-docs/docs/utilities/typography/",
    "relUrl": "/docs/utilities/typography/"
  },"137": {
    "doc": "UI Components",
    "title": "UI Components",
    "content": "To make it as easy as possible to write documentation in plain Markdown, most UI components are styled using default Markdown elements with few additional CSS classes needed. ",
    "url": "http://localhost:4000/just-the-docs/docs/ui-components",
    "relUrl": "/docs/ui-components"
  },"138": {
    "doc": "Utilities",
    "title": "Utilities",
    "content": "CSS utility classes come in handy when you to want to override default styles to create additional whitespace (margins/padding), correct unexpected shifts in font size or weight, add color, or hide (or show) something at a specific screen size. ",
    "url": "http://localhost:4000/just-the-docs/docs/utilities",
    "relUrl": "/docs/utilities"
  }
}
